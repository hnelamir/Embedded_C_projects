/*
 * timer1.c
 *
 *  Timer1 Driver .c file (Source file)
 *      Author: hnelamir
 */

#include <avr/io.h>
#include <avr/interrupt.h>
#include "common_macros.h"
#include "gpio.h"
#include "timer1.h"

/*                    Global Variables                     */
static volatile void(*g_callBackPtr)(void)= NULL_Ptr;

/*                       ISR                               */
ISR(TIMER1_OVF_vect){
	if(g_callBackPtr!=NULL_Ptr){
		(*g_callBackPtr)();
	}
}


ISR(TIMER1_COMPB_vect){
	if(g_callBackPtr!=NULL_Ptr){
		(*g_callBackPtr)();
	}
}


/*                       Functions                        */

/* To initialize the Timer */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
	TCNT1 = Config_Ptr->initial_value;
	SREG|=(1<<7)
		OCR1A = Config_Ptr->compare_value;
		if(Config_Ptr->mode == Normal){
			TIMSK = 1 << TOIE1;
		}
		else
			TIMSK = 1 << OCIE1A;
		TCCR1A= (1<<FOC1A) | (1<<FOC1B) | ((TCCR1A & 0XFC )| (Config_Ptr->mode & 0x3));
		TCCR1B = ((TCCR1B & 0XE7)|((Config_Ptr->mode & 0xC)<<1)) | (Config_Ptr->prescaler);

	}


/* To disable The Timer */
void Timer1_deInit(void){
	TIMSK&=~(1<<TOIE1);
	TIMSK&=(1<<OCIE1B);
	TCCR1A=0;
	TCCR1B=0;
	TCNT1=0;
}
/* To set the call back function address*/
void Timer1_setCallBack(void(*a_ptr)(void)){
	g_callBackPtr=a_ptr;
}

