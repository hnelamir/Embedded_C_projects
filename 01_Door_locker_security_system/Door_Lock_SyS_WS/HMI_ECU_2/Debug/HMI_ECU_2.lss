
HMI_ECU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  00002c2e  00002cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000e0  008000e0  00002d42  2**0
                  ALLOC
  3 .stab         000029ac  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001184  00000000  00000000  000056f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006874  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000876d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009658  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a408  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 55 13 	jmp	0x26aa	; 0x26aa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3e       	cpi	r26, 0xE6	; 230
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <main>
      8a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ec       	ldi	r26, 0xCA	; 202
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ec       	ldi	r24, 0xCA	; 202
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <First_Pass>:

/*                     Functions                              */



void First_Pass(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	ac 97       	sbiw	r28, 0x2c	; 44
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 F_pass=-1,i=0;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	8c a7       	std	Y+44, r24	; 0x2c
     b5e:	1b a6       	std	Y+43, r1	; 0x2b
	LCD_clearScreen();
     b60:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
     b64:	80 e6       	ldi	r24, 0x60	; 96
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
	LCD_moveCursor(1,0);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>
	UART_sendByte('F');
     b74:	86 e4       	ldi	r24, 0x46	; 70
     b76:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
	for(i=0;i<5;i++){
     b7a:	1b a6       	std	Y+43, r1	; 0x2b
     b7c:	85 c0       	rjmp	.+266    	; 0xc88 <First_Pass+0x142>
		F_pass=KEYPAD_getPressedKey();
     b7e:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
     b82:	8c a7       	std	Y+44, r24	; 0x2c
		if ((F_pass<=9)&&(F_pass>=0)){
     b84:	8c a5       	ldd	r24, Y+44	; 0x2c
     b86:	8a 30       	cpi	r24, 0x0A	; 10
     b88:	38 f4       	brcc	.+14     	; 0xb98 <First_Pass+0x52>
			LCD_displayCharacter('*');
     b8a:	8a e2       	ldi	r24, 0x2A	; 42
     b8c:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_displayCharacter>
			UART_sendByte(F_pass);
     b90:	8c a5       	ldd	r24, Y+44	; 0x2c
     b92:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
     b96:	03 c0       	rjmp	.+6      	; 0xb9e <First_Pass+0x58>

		}
		else
			i--;
     b98:	8b a5       	ldd	r24, Y+43	; 0x2b
     b9a:	81 50       	subi	r24, 0x01	; 1
     b9c:	8b a7       	std	Y+43, r24	; 0x2b
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	aa ef       	ldi	r26, 0xFA	; 250
     ba4:	b3 e4       	ldi	r27, 0x43	; 67
     ba6:	8f a3       	std	Y+39, r24	; 0x27
     ba8:	98 a7       	std	Y+40, r25	; 0x28
     baa:	a9 a7       	std	Y+41, r26	; 0x29
     bac:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bae:	6f a1       	ldd	r22, Y+39	; 0x27
     bb0:	78 a5       	ldd	r23, Y+40	; 0x28
     bb2:	89 a5       	ldd	r24, Y+41	; 0x29
     bb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	4a ef       	ldi	r20, 0xFA	; 250
     bbc:	54 e4       	ldi	r21, 0x44	; 68
     bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	8b a3       	std	Y+35, r24	; 0x23
     bc8:	9c a3       	std	Y+36, r25	; 0x24
     bca:	ad a3       	std	Y+37, r26	; 0x25
     bcc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bce:	6b a1       	ldd	r22, Y+35	; 0x23
     bd0:	7c a1       	ldd	r23, Y+36	; 0x24
     bd2:	8d a1       	ldd	r24, Y+37	; 0x25
     bd4:	9e a1       	ldd	r25, Y+38	; 0x26
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e8       	ldi	r20, 0x80	; 128
     bdc:	5f e3       	ldi	r21, 0x3F	; 63
     bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     be2:	88 23       	and	r24, r24
     be4:	2c f4       	brge	.+10     	; 0xbf0 <First_Pass+0xaa>
		__ticks = 1;
     be6:	81 e0       	ldi	r24, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	9a a3       	std	Y+34, r25	; 0x22
     bec:	89 a3       	std	Y+33, r24	; 0x21
     bee:	3f c0       	rjmp	.+126    	; 0xc6e <First_Pass+0x128>
	else if (__tmp > 65535)
     bf0:	6b a1       	ldd	r22, Y+35	; 0x23
     bf2:	7c a1       	ldd	r23, Y+36	; 0x24
     bf4:	8d a1       	ldd	r24, Y+37	; 0x25
     bf6:	9e a1       	ldd	r25, Y+38	; 0x26
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	3f ef       	ldi	r19, 0xFF	; 255
     bfc:	4f e7       	ldi	r20, 0x7F	; 127
     bfe:	57 e4       	ldi	r21, 0x47	; 71
     c00:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c04:	18 16       	cp	r1, r24
     c06:	4c f5       	brge	.+82     	; 0xc5a <First_Pass+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c08:	6f a1       	ldd	r22, Y+39	; 0x27
     c0a:	78 a5       	ldd	r23, Y+40	; 0x28
     c0c:	89 a5       	ldd	r24, Y+41	; 0x29
     c0e:	9a a5       	ldd	r25, Y+42	; 0x2a
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	bc 01       	movw	r22, r24
     c22:	cd 01       	movw	r24, r26
     c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c28:	dc 01       	movw	r26, r24
     c2a:	cb 01       	movw	r24, r22
     c2c:	9a a3       	std	Y+34, r25	; 0x22
     c2e:	89 a3       	std	Y+33, r24	; 0x21
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <First_Pass+0x10a>
     c32:	88 ec       	ldi	r24, 0xC8	; 200
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	98 a3       	std	Y+32, r25	; 0x20
     c38:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c3c:	98 a1       	ldd	r25, Y+32	; 0x20
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	f1 f7       	brne	.-4      	; 0xc3e <First_Pass+0xf8>
     c42:	98 a3       	std	Y+32, r25	; 0x20
     c44:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c46:	89 a1       	ldd	r24, Y+33	; 0x21
     c48:	9a a1       	ldd	r25, Y+34	; 0x22
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	9a a3       	std	Y+34, r25	; 0x22
     c4e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c50:	89 a1       	ldd	r24, Y+33	; 0x21
     c52:	9a a1       	ldd	r25, Y+34	; 0x22
     c54:	00 97       	sbiw	r24, 0x00	; 0
     c56:	69 f7       	brne	.-38     	; 0xc32 <First_Pass+0xec>
     c58:	14 c0       	rjmp	.+40     	; 0xc82 <First_Pass+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c5a:	6b a1       	ldd	r22, Y+35	; 0x23
     c5c:	7c a1       	ldd	r23, Y+36	; 0x24
     c5e:	8d a1       	ldd	r24, Y+37	; 0x25
     c60:	9e a1       	ldd	r25, Y+38	; 0x26
     c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c66:	dc 01       	movw	r26, r24
     c68:	cb 01       	movw	r24, r22
     c6a:	9a a3       	std	Y+34, r25	; 0x22
     c6c:	89 a3       	std	Y+33, r24	; 0x21
     c6e:	89 a1       	ldd	r24, Y+33	; 0x21
     c70:	9a a1       	ldd	r25, Y+34	; 0x22
     c72:	9e 8f       	std	Y+30, r25	; 0x1e
     c74:	8d 8f       	std	Y+29, r24	; 0x1d
     c76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c78:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	f1 f7       	brne	.-4      	; 0xc7a <First_Pass+0x134>
     c7e:	9e 8f       	std	Y+30, r25	; 0x1e
     c80:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 F_pass=-1,i=0;
	LCD_clearScreen();
	LCD_displayString("plz enter pass:");
	LCD_moveCursor(1,0);
	UART_sendByte('F');
	for(i=0;i<5;i++){
     c82:	8b a5       	ldd	r24, Y+43	; 0x2b
     c84:	8f 5f       	subi	r24, 0xFF	; 255
     c86:	8b a7       	std	Y+43, r24	; 0x2b
     c88:	8b a5       	ldd	r24, Y+43	; 0x2b
     c8a:	85 30       	cpi	r24, 0x05	; 5
     c8c:	08 f4       	brcc	.+2      	; 0xc90 <First_Pass+0x14a>
     c8e:	77 cf       	rjmp	.-274    	; 0xb7e <First_Pass+0x38>
		}
		else
			i--;
	_delay_ms(500);
	}
	F_pass=KEYPAD_getPressedKey();
     c90:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
     c94:	8c a7       	std	Y+44, r24	; 0x2c
	if(F_pass=='='){
     c96:	8c a5       	ldd	r24, Y+44	; 0x2c
     c98:	8d 33       	cpi	r24, 0x3D	; 61
     c9a:	89 f4       	brne	.+34     	; 0xcbe <First_Pass+0x178>
		LCD_clearScreen();
     c9c:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
		LCD_displayString("plz re-enter the");
     ca0:	80 e7       	ldi	r24, 0x70	; 112
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
		LCD_moveCursor(1,0);
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>
		LCD_displayString("same pass:");
     cb0:	81 e8       	ldi	r24, 0x81	; 129
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
		UART_sendByte(F_pass);
     cb8:	8c a5       	ldd	r24, Y+44	; 0x2c
     cba:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
	}
	LCD_moveCursor(1,11);
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	6b e0       	ldi	r22, 0x0B	; 11
     cc2:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>

	for(i=0;i<5;i++){
     cc6:	1b a6       	std	Y+43, r1	; 0x2b
     cc8:	f8 c0       	rjmp	.+496    	; 0xeba <First_Pass+0x374>
			F_pass=KEYPAD_getPressedKey();
     cca:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
     cce:	8c a7       	std	Y+44, r24	; 0x2c
			if ((F_pass<=9)&&(F_pass>=0)){
     cd0:	8c a5       	ldd	r24, Y+44	; 0x2c
     cd2:	8a 30       	cpi	r24, 0x0A	; 10
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <First_Pass+0x192>
     cd6:	79 c0       	rjmp	.+242    	; 0xdca <First_Pass+0x284>
				LCD_displayCharacter('*');
     cd8:	8a e2       	ldi	r24, 0x2A	; 42
     cda:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_displayCharacter>
				UART_sendByte(F_pass);
     cde:	8c a5       	ldd	r24, Y+44	; 0x2c
     ce0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	a0 e2       	ldi	r26, 0x20	; 32
     cea:	b1 e4       	ldi	r27, 0x41	; 65
     cec:	89 8f       	std	Y+25, r24	; 0x19
     cee:	9a 8f       	std	Y+26, r25	; 0x1a
     cf0:	ab 8f       	std	Y+27, r26	; 0x1b
     cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf4:	69 8d       	ldd	r22, Y+25	; 0x19
     cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cfc:	20 e0       	ldi	r18, 0x00	; 0
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	4a ef       	ldi	r20, 0xFA	; 250
     d02:	54 e4       	ldi	r21, 0x44	; 68
     d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d08:	dc 01       	movw	r26, r24
     d0a:	cb 01       	movw	r24, r22
     d0c:	8d 8b       	std	Y+21, r24	; 0x15
     d0e:	9e 8b       	std	Y+22, r25	; 0x16
     d10:	af 8b       	std	Y+23, r26	; 0x17
     d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d14:	6d 89       	ldd	r22, Y+21	; 0x15
     d16:	7e 89       	ldd	r23, Y+22	; 0x16
     d18:	8f 89       	ldd	r24, Y+23	; 0x17
     d1a:	98 8d       	ldd	r25, Y+24	; 0x18
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	40 e8       	ldi	r20, 0x80	; 128
     d22:	5f e3       	ldi	r21, 0x3F	; 63
     d24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d28:	88 23       	and	r24, r24
     d2a:	2c f4       	brge	.+10     	; 0xd36 <First_Pass+0x1f0>
		__ticks = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	9c 8b       	std	Y+20, r25	; 0x14
     d32:	8b 8b       	std	Y+19, r24	; 0x13
     d34:	3f c0       	rjmp	.+126    	; 0xdb4 <First_Pass+0x26e>
	else if (__tmp > 65535)
     d36:	6d 89       	ldd	r22, Y+21	; 0x15
     d38:	7e 89       	ldd	r23, Y+22	; 0x16
     d3a:	8f 89       	ldd	r24, Y+23	; 0x17
     d3c:	98 8d       	ldd	r25, Y+24	; 0x18
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	3f ef       	ldi	r19, 0xFF	; 255
     d42:	4f e7       	ldi	r20, 0x7F	; 127
     d44:	57 e4       	ldi	r21, 0x47	; 71
     d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d4a:	18 16       	cp	r1, r24
     d4c:	4c f5       	brge	.+82     	; 0xda0 <First_Pass+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4e:	69 8d       	ldd	r22, Y+25	; 0x19
     d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e2       	ldi	r20, 0x20	; 32
     d5c:	51 e4       	ldi	r21, 0x41	; 65
     d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d62:	dc 01       	movw	r26, r24
     d64:	cb 01       	movw	r24, r22
     d66:	bc 01       	movw	r22, r24
     d68:	cd 01       	movw	r24, r26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9c 8b       	std	Y+20, r25	; 0x14
     d74:	8b 8b       	std	Y+19, r24	; 0x13
     d76:	0f c0       	rjmp	.+30     	; 0xd96 <First_Pass+0x250>
     d78:	88 ec       	ldi	r24, 0xC8	; 200
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9a 8b       	std	Y+18, r25	; 0x12
     d7e:	89 8b       	std	Y+17, r24	; 0x11
     d80:	89 89       	ldd	r24, Y+17	; 0x11
     d82:	9a 89       	ldd	r25, Y+18	; 0x12
     d84:	01 97       	sbiw	r24, 0x01	; 1
     d86:	f1 f7       	brne	.-4      	; 0xd84 <First_Pass+0x23e>
     d88:	9a 8b       	std	Y+18, r25	; 0x12
     d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8c:	8b 89       	ldd	r24, Y+19	; 0x13
     d8e:	9c 89       	ldd	r25, Y+20	; 0x14
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	9c 8b       	std	Y+20, r25	; 0x14
     d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d96:	8b 89       	ldd	r24, Y+19	; 0x13
     d98:	9c 89       	ldd	r25, Y+20	; 0x14
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	69 f7       	brne	.-38     	; 0xd78 <First_Pass+0x232>
     d9e:	18 c0       	rjmp	.+48     	; 0xdd0 <First_Pass+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     da0:	6d 89       	ldd	r22, Y+21	; 0x15
     da2:	7e 89       	ldd	r23, Y+22	; 0x16
     da4:	8f 89       	ldd	r24, Y+23	; 0x17
     da6:	98 8d       	ldd	r25, Y+24	; 0x18
     da8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dac:	dc 01       	movw	r26, r24
     dae:	cb 01       	movw	r24, r22
     db0:	9c 8b       	std	Y+20, r25	; 0x14
     db2:	8b 8b       	std	Y+19, r24	; 0x13
     db4:	8b 89       	ldd	r24, Y+19	; 0x13
     db6:	9c 89       	ldd	r25, Y+20	; 0x14
     db8:	98 8b       	std	Y+16, r25	; 0x10
     dba:	8f 87       	std	Y+15, r24	; 0x0f
     dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dbe:	98 89       	ldd	r25, Y+16	; 0x10
     dc0:	01 97       	sbiw	r24, 0x01	; 1
     dc2:	f1 f7       	brne	.-4      	; 0xdc0 <First_Pass+0x27a>
     dc4:	98 8b       	std	Y+16, r25	; 0x10
     dc6:	8f 87       	std	Y+15, r24	; 0x0f
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <First_Pass+0x28a>
				_delay_ms(10);

			}
			else
				i--;
     dca:	8b a5       	ldd	r24, Y+43	; 0x2b
     dcc:	81 50       	subi	r24, 0x01	; 1
     dce:	8b a7       	std	Y+43, r24	; 0x2b
     dd0:	80 e0       	ldi	r24, 0x00	; 0
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	aa ef       	ldi	r26, 0xFA	; 250
     dd6:	b3 e4       	ldi	r27, 0x43	; 67
     dd8:	8b 87       	std	Y+11, r24	; 0x0b
     dda:	9c 87       	std	Y+12, r25	; 0x0c
     ddc:	ad 87       	std	Y+13, r26	; 0x0d
     dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de0:	6b 85       	ldd	r22, Y+11	; 0x0b
     de2:	7c 85       	ldd	r23, Y+12	; 0x0c
     de4:	8d 85       	ldd	r24, Y+13	; 0x0d
     de6:	9e 85       	ldd	r25, Y+14	; 0x0e
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	8f 83       	std	Y+7, r24	; 0x07
     dfa:	98 87       	std	Y+8, r25	; 0x08
     dfc:	a9 87       	std	Y+9, r26	; 0x09
     dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e00:	6f 81       	ldd	r22, Y+7	; 0x07
     e02:	78 85       	ldd	r23, Y+8	; 0x08
     e04:	89 85       	ldd	r24, Y+9	; 0x09
     e06:	9a 85       	ldd	r25, Y+10	; 0x0a
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	40 e8       	ldi	r20, 0x80	; 128
     e0e:	5f e3       	ldi	r21, 0x3F	; 63
     e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e14:	88 23       	and	r24, r24
     e16:	2c f4       	brge	.+10     	; 0xe22 <First_Pass+0x2dc>
		__ticks = 1;
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	9e 83       	std	Y+6, r25	; 0x06
     e1e:	8d 83       	std	Y+5, r24	; 0x05
     e20:	3f c0       	rjmp	.+126    	; 0xea0 <First_Pass+0x35a>
	else if (__tmp > 65535)
     e22:	6f 81       	ldd	r22, Y+7	; 0x07
     e24:	78 85       	ldd	r23, Y+8	; 0x08
     e26:	89 85       	ldd	r24, Y+9	; 0x09
     e28:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	3f ef       	ldi	r19, 0xFF	; 255
     e2e:	4f e7       	ldi	r20, 0x7F	; 127
     e30:	57 e4       	ldi	r21, 0x47	; 71
     e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e36:	18 16       	cp	r1, r24
     e38:	4c f5       	brge	.+82     	; 0xe8c <First_Pass+0x346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e40:	9e 85       	ldd	r25, Y+14	; 0x0e
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e2       	ldi	r20, 0x20	; 32
     e48:	51 e4       	ldi	r21, 0x41	; 65
     e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e4e:	dc 01       	movw	r26, r24
     e50:	cb 01       	movw	r24, r22
     e52:	bc 01       	movw	r22, r24
     e54:	cd 01       	movw	r24, r26
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9e 83       	std	Y+6, r25	; 0x06
     e60:	8d 83       	std	Y+5, r24	; 0x05
     e62:	0f c0       	rjmp	.+30     	; 0xe82 <First_Pass+0x33c>
     e64:	88 ec       	ldi	r24, 0xC8	; 200
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c 83       	std	Y+4, r25	; 0x04
     e6a:	8b 83       	std	Y+3, r24	; 0x03
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	9c 81       	ldd	r25, Y+4	; 0x04
     e70:	01 97       	sbiw	r24, 0x01	; 1
     e72:	f1 f7       	brne	.-4      	; 0xe70 <First_Pass+0x32a>
     e74:	9c 83       	std	Y+4, r25	; 0x04
     e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	9e 83       	std	Y+6, r25	; 0x06
     e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	69 f7       	brne	.-38     	; 0xe64 <First_Pass+0x31e>
     e8a:	14 c0       	rjmp	.+40     	; 0xeb4 <First_Pass+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8c:	6f 81       	ldd	r22, Y+7	; 0x07
     e8e:	78 85       	ldd	r23, Y+8	; 0x08
     e90:	89 85       	ldd	r24, Y+9	; 0x09
     e92:	9a 85       	ldd	r25, Y+10	; 0x0a
     e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	9e 83       	std	Y+6, r25	; 0x06
     e9e:	8d 83       	std	Y+5, r24	; 0x05
     ea0:	8d 81       	ldd	r24, Y+5	; 0x05
     ea2:	9e 81       	ldd	r25, Y+6	; 0x06
     ea4:	9a 83       	std	Y+2, r25	; 0x02
     ea6:	89 83       	std	Y+1, r24	; 0x01
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	9a 81       	ldd	r25, Y+2	; 0x02
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	f1 f7       	brne	.-4      	; 0xeac <First_Pass+0x366>
     eb0:	9a 83       	std	Y+2, r25	; 0x02
     eb2:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayString("same pass:");
		UART_sendByte(F_pass);
	}
	LCD_moveCursor(1,11);

	for(i=0;i<5;i++){
     eb4:	8b a5       	ldd	r24, Y+43	; 0x2b
     eb6:	8f 5f       	subi	r24, 0xFF	; 255
     eb8:	8b a7       	std	Y+43, r24	; 0x2b
     eba:	8b a5       	ldd	r24, Y+43	; 0x2b
     ebc:	85 30       	cpi	r24, 0x05	; 5
     ebe:	08 f4       	brcc	.+2      	; 0xec2 <First_Pass+0x37c>
     ec0:	04 cf       	rjmp	.-504    	; 0xcca <First_Pass+0x184>
			}
			else
				i--;
		_delay_ms(500);
		}
	F_pass=KEYPAD_getPressedKey();
     ec2:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
     ec6:	8c a7       	std	Y+44, r24	; 0x2c
	if(F_pass=='='){
     ec8:	8c a5       	ldd	r24, Y+44	; 0x2c
     eca:	8d 33       	cpi	r24, 0x3D	; 61
     ecc:	19 f4       	brne	.+6      	; 0xed4 <First_Pass+0x38e>
		UART_sendByte('=');
     ece:	8d e3       	ldi	r24, 0x3D	; 61
     ed0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>

	}
	g_check=UART_recieveByte();
     ed4:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_recieveByte>
     ed8:	80 93 e1 00 	sts	0x00E1, r24
	if(g_check){
     edc:	80 91 e1 00 	lds	r24, 0x00E1
     ee0:	88 23       	and	r24, r24
     ee2:	19 f0       	breq	.+6      	; 0xeea <First_Pass+0x3a4>
		LCD_clearScreen();
     ee4:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <First_Pass+0x3ac>
	}
	else {
		LCD_clearScreen();
     eea:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
		First_Pass();}
     eee:	0e 94 a3 05 	call	0xb46	; 0xb46 <First_Pass>


}
     ef2:	ac 96       	adiw	r28, 0x2c	; 44
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <Buzzer_HMI>:


void Buzzer_HMI(){
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
     f0c:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
	UART_sendByte('B');
     f10:	82 e4       	ldi	r24, 0x42	; 66
     f12:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
	LCD_displayString("ERROR");
     f16:	8c e8       	ldi	r24, 0x8C	; 140
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
	g_HMI_ticks=0;
     f1e:	10 92 e0 00 	sts	0x00E0, r1
	while(g_HMI_ticks<=60);
     f22:	80 91 e0 00 	lds	r24, 0x00E0
     f26:	8d 33       	cpi	r24, 0x3D	; 61
     f28:	e0 f3       	brcs	.-8      	; 0xf22 <Buzzer_HMI+0x1e>
	g_HMI_ticks=0;
     f2a:	10 92 e0 00 	sts	0x00E0, r1
}
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <Password>:
void Password(){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
     f3c:	60 97       	sbiw	r28, 0x10	; 16
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0,F_pass=-1;
     f48:	18 8a       	std	Y+16, r1	; 0x10
     f4a:	8f ef       	ldi	r24, 0xFF	; 255
     f4c:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_clearScreen();
     f4e:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
		UART_sendByte('C');
     f52:	83 e4       	ldi	r24, 0x43	; 67
     f54:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
		LCD_displayString("plz enter pass:");
     f58:	80 e6       	ldi	r24, 0x60	; 96
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
		LCD_moveCursor(1,0);
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>
			for(i=0;i<5;i++){
     f68:	18 8a       	std	Y+16, r1	; 0x10
     f6a:	85 c0       	rjmp	.+266    	; 0x1076 <Password+0x142>
				F_pass=KEYPAD_getPressedKey();
     f6c:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
     f70:	8f 87       	std	Y+15, r24	; 0x0f
				if ((F_pass<=9)&&(F_pass>=0)){
     f72:	8f 85       	ldd	r24, Y+15	; 0x0f
     f74:	8a 30       	cpi	r24, 0x0A	; 10
     f76:	38 f4       	brcc	.+14     	; 0xf86 <Password+0x52>
					LCD_displayCharacter('*');
     f78:	8a e2       	ldi	r24, 0x2A	; 42
     f7a:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_displayCharacter>
					UART_sendByte(F_pass);
     f7e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f80:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <Password+0x58>

				}
				else
					i--;
     f86:	88 89       	ldd	r24, Y+16	; 0x10
     f88:	81 50       	subi	r24, 0x01	; 1
     f8a:	88 8b       	std	Y+16, r24	; 0x10
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	aa ef       	ldi	r26, 0xFA	; 250
     f92:	b3 e4       	ldi	r27, 0x43	; 67
     f94:	8b 87       	std	Y+11, r24	; 0x0b
     f96:	9c 87       	std	Y+12, r25	; 0x0c
     f98:	ad 87       	std	Y+13, r26	; 0x0d
     f9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	4a ef       	ldi	r20, 0xFA	; 250
     faa:	54 e4       	ldi	r21, 0x44	; 68
     fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	8f 83       	std	Y+7, r24	; 0x07
     fb6:	98 87       	std	Y+8, r25	; 0x08
     fb8:	a9 87       	std	Y+9, r26	; 0x09
     fba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fbc:	6f 81       	ldd	r22, Y+7	; 0x07
     fbe:	78 85       	ldd	r23, Y+8	; 0x08
     fc0:	89 85       	ldd	r24, Y+9	; 0x09
     fc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f e3       	ldi	r21, 0x3F	; 63
     fcc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fd0:	88 23       	and	r24, r24
     fd2:	2c f4       	brge	.+10     	; 0xfde <Password+0xaa>
		__ticks = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9e 83       	std	Y+6, r25	; 0x06
     fda:	8d 83       	std	Y+5, r24	; 0x05
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <Password+0x128>
	else if (__tmp > 65535)
     fde:	6f 81       	ldd	r22, Y+7	; 0x07
     fe0:	78 85       	ldd	r23, Y+8	; 0x08
     fe2:	89 85       	ldd	r24, Y+9	; 0x09
     fe4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	3f ef       	ldi	r19, 0xFF	; 255
     fea:	4f e7       	ldi	r20, 0x7F	; 127
     fec:	57 e4       	ldi	r21, 0x47	; 71
     fee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ff2:	18 16       	cp	r1, r24
     ff4:	4c f5       	brge	.+82     	; 0x1048 <Password+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ff8:	7c 85       	ldd	r23, Y+12	; 0x0c
     ffa:	8d 85       	ldd	r24, Y+13	; 0x0d
     ffc:	9e 85       	ldd	r25, Y+14	; 0x0e
     ffe:	20 e0       	ldi	r18, 0x00	; 0
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	40 e2       	ldi	r20, 0x20	; 32
    1004:	51 e4       	ldi	r21, 0x41	; 65
    1006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
    101e:	0f c0       	rjmp	.+30     	; 0x103e <Password+0x10a>
    1020:	88 ec       	ldi	r24, 0xC8	; 200
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	01 97       	sbiw	r24, 0x01	; 1
    102e:	f1 f7       	brne	.-4      	; 0x102c <Password+0xf8>
    1030:	9c 83       	std	Y+4, r25	; 0x04
    1032:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1034:	8d 81       	ldd	r24, Y+5	; 0x05
    1036:	9e 81       	ldd	r25, Y+6	; 0x06
    1038:	01 97       	sbiw	r24, 0x01	; 1
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    103e:	8d 81       	ldd	r24, Y+5	; 0x05
    1040:	9e 81       	ldd	r25, Y+6	; 0x06
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	69 f7       	brne	.-38     	; 0x1020 <Password+0xec>
    1046:	14 c0       	rjmp	.+40     	; 0x1070 <Password+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	9e 83       	std	Y+6, r25	; 0x06
    105a:	8d 83       	std	Y+5, r24	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	9a 81       	ldd	r25, Y+2	; 0x02
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	f1 f7       	brne	.-4      	; 0x1068 <Password+0x134>
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	uint8 i=0,F_pass=-1;
		LCD_clearScreen();
		UART_sendByte('C');
		LCD_displayString("plz enter pass:");
		LCD_moveCursor(1,0);
			for(i=0;i<5;i++){
    1070:	88 89       	ldd	r24, Y+16	; 0x10
    1072:	8f 5f       	subi	r24, 0xFF	; 255
    1074:	88 8b       	std	Y+16, r24	; 0x10
    1076:	88 89       	ldd	r24, Y+16	; 0x10
    1078:	85 30       	cpi	r24, 0x05	; 5
    107a:	08 f4       	brcc	.+2      	; 0x107e <Password+0x14a>
    107c:	77 cf       	rjmp	.-274    	; 0xf6c <Password+0x38>
				}
				else
					i--;
			_delay_ms(500);
			}
		F_pass=KEYPAD_getPressedKey();
    107e:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
    1082:	8f 87       	std	Y+15, r24	; 0x0f
		if(F_pass=='='){
    1084:	8f 85       	ldd	r24, Y+15	; 0x0f
    1086:	8d 33       	cpi	r24, 0x3D	; 61
    1088:	11 f4       	brne	.+4      	; 0x108e <Password+0x15a>
			LCD_clearScreen();
    108a:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
		}
		g_Pass_Check=UART_recieveByte();
    108e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_recieveByte>
    1092:	80 93 e3 00 	sts	0x00E3, r24
}
    1096:	60 96       	adiw	r28, 0x10	; 16
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <Change_Pass>:

void Change_Pass(){
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	cd b7       	in	r28, 0x3d	; 61
    10ae:	de b7       	in	r29, 0x3e	; 62
	Password();
    10b0:	0e 94 9a 07 	call	0xf34	; 0xf34 <Password>
	if(g_Pass_Check==FAILED){
    10b4:	80 91 e3 00 	lds	r24, 0x00E3
    10b8:	88 23       	and	r24, r24
    10ba:	99 f4       	brne	.+38     	; 0x10e2 <Change_Pass+0x3a>
		g_counter++;
    10bc:	80 91 e2 00 	lds	r24, 0x00E2
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	80 93 e2 00 	sts	0x00E2, r24
		if(g_counter==3){
    10c6:	80 91 e2 00 	lds	r24, 0x00E2
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	39 f4       	brne	.+14     	; 0x10dc <Change_Pass+0x34>
			Buzzer_HMI();
    10ce:	0e 94 82 07 	call	0xf04	; 0xf04 <Buzzer_HMI>
			LCD_clearScreen();
    10d2:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
			g_counter=0;
    10d6:	10 92 e2 00 	sts	0x00E2, r1
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <Change_Pass+0x42>
			return ;
					}
		else{
			Change_Pass();
    10dc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Change_Pass>
    10e0:	04 c0       	rjmp	.+8      	; 0x10ea <Change_Pass+0x42>
				}
		}
	else{
		g_counter=0;
    10e2:	10 92 e2 00 	sts	0x00E2, r1
		First_Pass();
    10e6:	0e 94 a3 05 	call	0xb46	; 0xb46 <First_Pass>

	}

}
    10ea:	cf 91       	pop	r28
    10ec:	df 91       	pop	r29
    10ee:	08 95       	ret

000010f0 <Door_Control>:

void Door_Control(){
    10f0:	df 93       	push	r29
    10f2:	cf 93       	push	r28
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
	Password();
    10f8:	0e 94 9a 07 	call	0xf34	; 0xf34 <Password>
		if(g_Pass_Check==FAILED){
    10fc:	80 91 e3 00 	lds	r24, 0x00E3
    1100:	88 23       	and	r24, r24
    1102:	99 f4       	brne	.+38     	; 0x112a <Door_Control+0x3a>
			g_counter++;
    1104:	80 91 e2 00 	lds	r24, 0x00E2
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 e2 00 	sts	0x00E2, r24
			if(g_counter==3){
    110e:	80 91 e2 00 	lds	r24, 0x00E2
    1112:	83 30       	cpi	r24, 0x03	; 3
    1114:	39 f4       	brne	.+14     	; 0x1124 <Door_Control+0x34>
				Buzzer_HMI();
    1116:	0e 94 82 07 	call	0xf04	; 0xf04 <Buzzer_HMI>
				LCD_clearScreen();
    111a:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
				g_counter=0;
    111e:	10 92 e2 00 	sts	0x00E2, r1
    1122:	38 c0       	rjmp	.+112    	; 0x1194 <Door_Control+0xa4>
				return ;
						}
			else{
				Change_Pass();
    1124:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Change_Pass>
    1128:	35 c0       	rjmp	.+106    	; 0x1194 <Door_Control+0xa4>
					}
			}
		else{
			g_counter=0;
    112a:	10 92 e2 00 	sts	0x00E2, r1
			UART_sendByte('O');
    112e:	8f e4       	ldi	r24, 0x4F	; 79
    1130:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
			LCD_clearScreen();
    1134:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Door is");
    1138:	22 e9       	ldi	r18, 0x92	; 146
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Unlocking");
    1146:	2a e9       	ldi	r18, 0x9A	; 154
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	a9 01       	movw	r20, r18
    1150:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_displayStringRowColumn>
			g_HMI_ticks = 0;
    1154:	10 92 e0 00 	sts	0x00E0, r1
			while (g_HMI_ticks<= 15);
    1158:	80 91 e0 00 	lds	r24, 0x00E0
    115c:	80 31       	cpi	r24, 0x10	; 16
    115e:	e0 f3       	brcs	.-8      	; 0x1158 <Door_Control+0x68>
			while (g_HMI_ticks <= 18);
    1160:	80 91 e0 00 	lds	r24, 0x00E0
    1164:	83 31       	cpi	r24, 0x13	; 19
    1166:	e0 f3       	brcs	.-8      	; 0x1160 <Door_Control+0x70>
			LCD_clearScreen();
    1168:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Door is");
    116c:	22 e9       	ldi	r18, 0x92	; 146
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	a9 01       	movw	r20, r18
    1176:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "Locking");
    117a:	24 ea       	ldi	r18, 0xA4	; 164
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	0e 94 0f 13 	call	0x261e	; 0x261e <LCD_displayStringRowColumn>
			while (g_HMI_ticks <= 33);
    1188:	80 91 e0 00 	lds	r24, 0x00E0
    118c:	82 32       	cpi	r24, 0x22	; 34
    118e:	e0 f3       	brcs	.-8      	; 0x1188 <Door_Control+0x98>
			g_HMI_ticks = 0;
    1190:	10 92 e0 00 	sts	0x00E0, r1

		}
}
    1194:	cf 91       	pop	r28
    1196:	df 91       	pop	r29
    1198:	08 95       	ret

0000119a <HMI_Ticks>:
void HMI_Ticks(){
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	g_HMI_ticks++;
    11a2:	80 91 e0 00 	lds	r24, 0x00E0
    11a6:	8f 5f       	subi	r24, 0xFF	; 255
    11a8:	80 93 e0 00 	sts	0x00E0, r24
}
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <main>:

/*                     Main Function                          */

int main(void){
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	6a 97       	sbiw	r28, 0x1a	; 26
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	f8 94       	cli
    11c0:	de bf       	out	0x3e, r29	; 62
    11c2:	0f be       	out	0x3f, r0	; 63
    11c4:	cd bf       	out	0x3d, r28	; 61
	 *  Initial Value=0
	 *  Compare Value=999
	 *  Prescaler = 1024
	 *  Mode = CTC (Compare)
	 */
	Timer1_ConfigType TimConfig_HMI={0,31249,F_CPU_256,CTC};
    11c6:	9e 01       	movw	r18, r28
    11c8:	2e 5f       	subi	r18, 0xFE	; 254
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	3a 8b       	std	Y+18, r19	; 0x12
    11ce:	29 8b       	std	Y+17, r18	; 0x11
    11d0:	89 ed       	ldi	r24, 0xD9	; 217
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9c 8b       	std	Y+20, r25	; 0x14
    11d6:	8b 8b       	std	Y+19, r24	; 0x13
    11d8:	96 e0       	ldi	r25, 0x06	; 6
    11da:	9d 8b       	std	Y+21, r25	; 0x15
    11dc:	eb 89       	ldd	r30, Y+19	; 0x13
    11de:	fc 89       	ldd	r31, Y+20	; 0x14
    11e0:	00 80       	ld	r0, Z
    11e2:	2b 89       	ldd	r18, Y+19	; 0x13
    11e4:	3c 89       	ldd	r19, Y+20	; 0x14
    11e6:	2f 5f       	subi	r18, 0xFF	; 255
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	3c 8b       	std	Y+20, r19	; 0x14
    11ec:	2b 8b       	std	Y+19, r18	; 0x13
    11ee:	e9 89       	ldd	r30, Y+17	; 0x11
    11f0:	fa 89       	ldd	r31, Y+18	; 0x12
    11f2:	00 82       	st	Z, r0
    11f4:	29 89       	ldd	r18, Y+17	; 0x11
    11f6:	3a 89       	ldd	r19, Y+18	; 0x12
    11f8:	2f 5f       	subi	r18, 0xFF	; 255
    11fa:	3f 4f       	sbci	r19, 0xFF	; 255
    11fc:	3a 8b       	std	Y+18, r19	; 0x12
    11fe:	29 8b       	std	Y+17, r18	; 0x11
    1200:	3d 89       	ldd	r19, Y+21	; 0x15
    1202:	31 50       	subi	r19, 0x01	; 1
    1204:	3d 8b       	std	Y+21, r19	; 0x15
    1206:	8d 89       	ldd	r24, Y+21	; 0x15
    1208:	88 23       	and	r24, r24
    120a:	41 f7       	brne	.-48     	; 0x11dc <main+0x2a>
	Timer1_init(&TimConfig_HMI);
    120c:	ce 01       	movw	r24, r28
    120e:	02 96       	adiw	r24, 0x02	; 2
    1210:	0e 94 bb 13 	call	0x2776	; 0x2776 <Timer1_init>
	 * 	Date Length=8
	 * 	Parity type=Even
	 * 	Stop Bits=1
	 * 	Baudrate=9600
	 */
	UART_ConfigType UARTConfig_HMI={EIGHT,EVEN,ONE_BIT,BR7};
    1214:	fe 01       	movw	r30, r28
    1216:	38 96       	adiw	r30, 0x08	; 8
    1218:	ff 8b       	std	Y+23, r31	; 0x17
    121a:	ee 8b       	std	Y+22, r30	; 0x16
    121c:	22 ed       	ldi	r18, 0xD2	; 210
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	39 8f       	std	Y+25, r19	; 0x19
    1222:	28 8f       	std	Y+24, r18	; 0x18
    1224:	37 e0       	ldi	r19, 0x07	; 7
    1226:	3a 8f       	std	Y+26, r19	; 0x1a
    1228:	e8 8d       	ldd	r30, Y+24	; 0x18
    122a:	f9 8d       	ldd	r31, Y+25	; 0x19
    122c:	00 80       	ld	r0, Z
    122e:	28 8d       	ldd	r18, Y+24	; 0x18
    1230:	39 8d       	ldd	r19, Y+25	; 0x19
    1232:	2f 5f       	subi	r18, 0xFF	; 255
    1234:	3f 4f       	sbci	r19, 0xFF	; 255
    1236:	39 8f       	std	Y+25, r19	; 0x19
    1238:	28 8f       	std	Y+24, r18	; 0x18
    123a:	ee 89       	ldd	r30, Y+22	; 0x16
    123c:	ff 89       	ldd	r31, Y+23	; 0x17
    123e:	00 82       	st	Z, r0
    1240:	2e 89       	ldd	r18, Y+22	; 0x16
    1242:	3f 89       	ldd	r19, Y+23	; 0x17
    1244:	2f 5f       	subi	r18, 0xFF	; 255
    1246:	3f 4f       	sbci	r19, 0xFF	; 255
    1248:	3f 8b       	std	Y+23, r19	; 0x17
    124a:	2e 8b       	std	Y+22, r18	; 0x16
    124c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    124e:	31 50       	subi	r19, 0x01	; 1
    1250:	3a 8f       	std	Y+26, r19	; 0x1a
    1252:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1254:	88 23       	and	r24, r24
    1256:	41 f7       	brne	.-48     	; 0x1228 <main+0x76>
	UART_init(&UARTConfig_HMI);
    1258:	ce 01       	movw	r24, r28
    125a:	08 96       	adiw	r24, 0x08	; 8
    125c:	0e 94 64 14 	call	0x28c8	; 0x28c8 <UART_init>
	Timer1_setCallBack(HMI_Ticks);
    1260:	8d ec       	ldi	r24, 0xCD	; 205
    1262:	98 e0       	ldi	r25, 0x08	; 8
    1264:	0e 94 52 14 	call	0x28a4	; 0x28a4 <Timer1_setCallBack>
	LCD_init();
    1268:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <LCD_init>
	First_Pass();
    126c:	0e 94 a3 05 	call	0xb46	; 0xb46 <First_Pass>

	while(1){
		LCD_clearScreen();
    1270:	0e 94 4b 13 	call	0x2696	; 0x2696 <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
    1274:	8c ea       	ldi	r24, 0xAC	; 172
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
		LCD_moveCursor(1,0);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
    1284:	8a eb       	ldi	r24, 0xBA	; 186
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
		Input=KEYPAD_getPressedKey();
    128c:	0e 94 9f 0c 	call	0x193e	; 0x193e <KEYPAD_getPressedKey>
    1290:	89 83       	std	Y+1, r24	; 0x01
		switch(Input){
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	e8 2f       	mov	r30, r24
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	f8 8b       	std	Y+16, r31	; 0x10
    129a:	ef 87       	std	Y+15, r30	; 0x0f
    129c:	2f 85       	ldd	r18, Y+15	; 0x0f
    129e:	38 89       	ldd	r19, Y+16	; 0x10
    12a0:	2b 32       	cpi	r18, 0x2B	; 43
    12a2:	31 05       	cpc	r19, r1
    12a4:	31 f0       	breq	.+12     	; 0x12b2 <main+0x100>
    12a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12a8:	98 89       	ldd	r25, Y+16	; 0x10
    12aa:	8d 32       	cpi	r24, 0x2D	; 45
    12ac:	91 05       	cpc	r25, r1
    12ae:	21 f0       	breq	.+8      	; 0x12b8 <main+0x106>
    12b0:	df cf       	rjmp	.-66     	; 0x1270 <main+0xbe>
		case '+':
			Door_Control();
    12b2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <Door_Control>
    12b6:	dc cf       	rjmp	.-72     	; 0x1270 <main+0xbe>
			break;
		case '-':
			g_counter=0;
    12b8:	10 92 e2 00 	sts	0x00E2, r1
			Change_Pass();
    12bc:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Change_Pass>
    12c0:	d7 cf       	rjmp	.-82     	; 0x1270 <main+0xbe>

000012c2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <GPIO_setupPinDirection+0x6>
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <GPIO_setupPinDirection+0x8>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	6a 83       	std	Y+2, r22	; 0x02
    12d4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 30       	cpi	r24, 0x08	; 8
    12da:	08 f0       	brcs	.+2      	; 0x12de <GPIO_setupPinDirection+0x1c>
    12dc:	d5 c0       	rjmp	.+426    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	84 30       	cpi	r24, 0x04	; 4
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <GPIO_setupPinDirection+0x24>
    12e4:	d1 c0       	rjmp	.+418    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3d 83       	std	Y+5, r19	; 0x05
    12ee:	2c 83       	std	Y+4, r18	; 0x04
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	91 05       	cpc	r25, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <GPIO_setupPinDirection+0x3a>
    12fa:	43 c0       	rjmp	.+134    	; 0x1382 <GPIO_setupPinDirection+0xc0>
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	22 30       	cpi	r18, 0x02	; 2
    1302:	31 05       	cpc	r19, r1
    1304:	2c f4       	brge	.+10     	; 0x1310 <GPIO_setupPinDirection+0x4e>
    1306:	8c 81       	ldd	r24, Y+4	; 0x04
    1308:	9d 81       	ldd	r25, Y+5	; 0x05
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	71 f0       	breq	.+28     	; 0x132a <GPIO_setupPinDirection+0x68>
    130e:	bc c0       	rjmp	.+376    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
    1310:	2c 81       	ldd	r18, Y+4	; 0x04
    1312:	3d 81       	ldd	r19, Y+5	; 0x05
    1314:	22 30       	cpi	r18, 0x02	; 2
    1316:	31 05       	cpc	r19, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <GPIO_setupPinDirection+0x5a>
    131a:	5f c0       	rjmp	.+190    	; 0x13da <GPIO_setupPinDirection+0x118>
    131c:	8c 81       	ldd	r24, Y+4	; 0x04
    131e:	9d 81       	ldd	r25, Y+5	; 0x05
    1320:	83 30       	cpi	r24, 0x03	; 3
    1322:	91 05       	cpc	r25, r1
    1324:	09 f4       	brne	.+2      	; 0x1328 <GPIO_setupPinDirection+0x66>
    1326:	85 c0       	rjmp	.+266    	; 0x1432 <GPIO_setupPinDirection+0x170>
    1328:	af c0       	rjmp	.+350    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	a1 f4       	brne	.+40     	; 0x1358 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1330:	aa e3       	ldi	r26, 0x3A	; 58
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ea e3       	ldi	r30, 0x3A	; 58
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	48 2f       	mov	r20, r24
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	02 2e       	mov	r0, r18
    1348:	02 c0       	rjmp	.+4      	; 0x134e <GPIO_setupPinDirection+0x8c>
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	0a 94       	dec	r0
    1350:	e2 f7       	brpl	.-8      	; 0x134a <GPIO_setupPinDirection+0x88>
    1352:	84 2b       	or	r24, r20
    1354:	8c 93       	st	X, r24
    1356:	98 c0       	rjmp	.+304    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1358:	aa e3       	ldi	r26, 0x3A	; 58
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ea e3       	ldi	r30, 0x3A	; 58
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	02 2e       	mov	r0, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <GPIO_setupPinDirection+0xb4>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	0a 94       	dec	r0
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <GPIO_setupPinDirection+0xb0>
    137a:	80 95       	com	r24
    137c:	84 23       	and	r24, r20
    137e:	8c 93       	st	X, r24
    1380:	83 c0       	rjmp	.+262    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1388:	a7 e3       	ldi	r26, 0x37	; 55
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e7 e3       	ldi	r30, 0x37	; 55
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <GPIO_setupPinDirection+0xe4>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <GPIO_setupPinDirection+0xe0>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	6c c0       	rjmp	.+216    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13b0:	a7 e3       	ldi	r26, 0x37	; 55
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e7 e3       	ldi	r30, 0x37	; 55
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <GPIO_setupPinDirection+0x10c>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <GPIO_setupPinDirection+0x108>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	57 c0       	rjmp	.+174    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13e0:	a4 e3       	ldi	r26, 0x34	; 52
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e4 e3       	ldi	r30, 0x34	; 52
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_setupPinDirection+0x13c>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_setupPinDirection+0x138>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	40 c0       	rjmp	.+128    	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1408:	a4 e3       	ldi	r26, 0x34	; 52
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <GPIO_setupPinDirection+0x164>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <GPIO_setupPinDirection+0x160>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	2b c0       	rjmp	.+86     	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1438:	a1 e3       	ldi	r26, 0x31	; 49
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e1 e3       	ldi	r30, 0x31	; 49
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <GPIO_setupPinDirection+0x194>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <GPIO_setupPinDirection+0x190>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1460:	a1 e3       	ldi	r26, 0x31	; 49
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e1 e3       	ldi	r30, 0x31	; 49
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <GPIO_setupPinDirection+0x1bc>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <GPIO_setupPinDirection+0x1b8>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <GPIO_writePin+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <GPIO_writePin+0x8>
    14a0:	0f 92       	push	r0
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
    14aa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <GPIO_writePin+0x1c>
    14b2:	d5 c0       	rjmp	.+426    	; 0x165e <GPIO_writePin+0x1c6>
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	08 f0       	brcs	.+2      	; 0x14bc <GPIO_writePin+0x24>
    14ba:	d1 c0       	rjmp	.+418    	; 0x165e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
    14be:	28 2f       	mov	r18, r24
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	3d 83       	std	Y+5, r19	; 0x05
    14c4:	2c 83       	std	Y+4, r18	; 0x04
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <GPIO_writePin+0x3a>
    14d0:	43 c0       	rjmp	.+134    	; 0x1558 <GPIO_writePin+0xc0>
    14d2:	2c 81       	ldd	r18, Y+4	; 0x04
    14d4:	3d 81       	ldd	r19, Y+5	; 0x05
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	2c f4       	brge	.+10     	; 0x14e6 <GPIO_writePin+0x4e>
    14dc:	8c 81       	ldd	r24, Y+4	; 0x04
    14de:	9d 81       	ldd	r25, Y+5	; 0x05
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	71 f0       	breq	.+28     	; 0x1500 <GPIO_writePin+0x68>
    14e4:	bc c0       	rjmp	.+376    	; 0x165e <GPIO_writePin+0x1c6>
    14e6:	2c 81       	ldd	r18, Y+4	; 0x04
    14e8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ea:	22 30       	cpi	r18, 0x02	; 2
    14ec:	31 05       	cpc	r19, r1
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <GPIO_writePin+0x5a>
    14f0:	5f c0       	rjmp	.+190    	; 0x15b0 <GPIO_writePin+0x118>
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
    14f4:	9d 81       	ldd	r25, Y+5	; 0x05
    14f6:	83 30       	cpi	r24, 0x03	; 3
    14f8:	91 05       	cpc	r25, r1
    14fa:	09 f4       	brne	.+2      	; 0x14fe <GPIO_writePin+0x66>
    14fc:	85 c0       	rjmp	.+266    	; 0x1608 <GPIO_writePin+0x170>
    14fe:	af c0       	rjmp	.+350    	; 0x165e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	81 30       	cpi	r24, 0x01	; 1
    1504:	a1 f4       	brne	.+40     	; 0x152e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1506:	ab e3       	ldi	r26, 0x3B	; 59
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	eb e3       	ldi	r30, 0x3B	; 59
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	8a 81       	ldd	r24, Y+2	; 0x02
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 2e       	mov	r0, r18
    151e:	02 c0       	rjmp	.+4      	; 0x1524 <GPIO_writePin+0x8c>
    1520:	88 0f       	add	r24, r24
    1522:	99 1f       	adc	r25, r25
    1524:	0a 94       	dec	r0
    1526:	e2 f7       	brpl	.-8      	; 0x1520 <GPIO_writePin+0x88>
    1528:	84 2b       	or	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	98 c0       	rjmp	.+304    	; 0x165e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    152e:	ab e3       	ldi	r26, 0x3B	; 59
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	eb e3       	ldi	r30, 0x3B	; 59
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_writePin+0xb4>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_writePin+0xb0>
    1550:	80 95       	com	r24
    1552:	84 23       	and	r24, r20
    1554:	8c 93       	st	X, r24
    1556:	83 c0       	rjmp	.+262    	; 0x165e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	a1 f4       	brne	.+40     	; 0x1586 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8a 81       	ldd	r24, Y+2	; 0x02
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <GPIO_writePin+0xe4>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <GPIO_writePin+0xe0>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	6c c0       	rjmp	.+216    	; 0x165e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1586:	a8 e3       	ldi	r26, 0x38	; 56
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e8 e3       	ldi	r30, 0x38	; 56
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	48 2f       	mov	r20, r24
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	02 2e       	mov	r0, r18
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <GPIO_writePin+0x10c>
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	0a 94       	dec	r0
    15a6:	e2 f7       	brpl	.-8      	; 0x15a0 <GPIO_writePin+0x108>
    15a8:	80 95       	com	r24
    15aa:	84 23       	and	r24, r20
    15ac:	8c 93       	st	X, r24
    15ae:	57 c0       	rjmp	.+174    	; 0x165e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15b0:	8b 81       	ldd	r24, Y+3	; 0x03
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	a1 f4       	brne	.+40     	; 0x15de <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15b6:	a5 e3       	ldi	r26, 0x35	; 53
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	e5 e3       	ldi	r30, 0x35	; 53
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	48 2f       	mov	r20, r24
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	02 2e       	mov	r0, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <GPIO_writePin+0x13c>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	0a 94       	dec	r0
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <GPIO_writePin+0x138>
    15d8:	84 2b       	or	r24, r20
    15da:	8c 93       	st	X, r24
    15dc:	40 c0       	rjmp	.+128    	; 0x165e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15de:	a5 e3       	ldi	r26, 0x35	; 53
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e3       	ldi	r30, 0x35	; 53
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <GPIO_writePin+0x164>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <GPIO_writePin+0x160>
    1600:	80 95       	com	r24
    1602:	84 23       	and	r24, r20
    1604:	8c 93       	st	X, r24
    1606:	2b c0       	rjmp	.+86     	; 0x165e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	a1 f4       	brne	.+40     	; 0x1636 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    160e:	a2 e3       	ldi	r26, 0x32	; 50
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	48 2f       	mov	r20, r24
    161a:	8a 81       	ldd	r24, Y+2	; 0x02
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 2e       	mov	r0, r18
    1626:	02 c0       	rjmp	.+4      	; 0x162c <GPIO_writePin+0x194>
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	0a 94       	dec	r0
    162e:	e2 f7       	brpl	.-8      	; 0x1628 <GPIO_writePin+0x190>
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	14 c0       	rjmp	.+40     	; 0x165e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1636:	a2 e3       	ldi	r26, 0x32	; 50
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e2 e3       	ldi	r30, 0x32	; 50
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <GPIO_writePin+0x1bc>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <GPIO_writePin+0x1b8>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <GPIO_readPin+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_readPin+0x8>
    1676:	0f 92       	push	r0
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1680:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	88 30       	cpi	r24, 0x08	; 8
    1686:	08 f0       	brcs	.+2      	; 0x168a <GPIO_readPin+0x1c>
    1688:	84 c0       	rjmp	.+264    	; 0x1792 <GPIO_readPin+0x124>
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	84 30       	cpi	r24, 0x04	; 4
    168e:	08 f0       	brcs	.+2      	; 0x1692 <GPIO_readPin+0x24>
    1690:	80 c0       	rjmp	.+256    	; 0x1792 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	3d 83       	std	Y+5, r19	; 0x05
    169a:	2c 83       	std	Y+4, r18	; 0x04
    169c:	4c 81       	ldd	r20, Y+4	; 0x04
    169e:	5d 81       	ldd	r21, Y+5	; 0x05
    16a0:	41 30       	cpi	r20, 0x01	; 1
    16a2:	51 05       	cpc	r21, r1
    16a4:	79 f1       	breq	.+94     	; 0x1704 <GPIO_readPin+0x96>
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	82 30       	cpi	r24, 0x02	; 2
    16ac:	91 05       	cpc	r25, r1
    16ae:	34 f4       	brge	.+12     	; 0x16bc <GPIO_readPin+0x4e>
    16b0:	2c 81       	ldd	r18, Y+4	; 0x04
    16b2:	3d 81       	ldd	r19, Y+5	; 0x05
    16b4:	21 15       	cp	r18, r1
    16b6:	31 05       	cpc	r19, r1
    16b8:	69 f0       	breq	.+26     	; 0x16d4 <GPIO_readPin+0x66>
    16ba:	6b c0       	rjmp	.+214    	; 0x1792 <GPIO_readPin+0x124>
    16bc:	4c 81       	ldd	r20, Y+4	; 0x04
    16be:	5d 81       	ldd	r21, Y+5	; 0x05
    16c0:	42 30       	cpi	r20, 0x02	; 2
    16c2:	51 05       	cpc	r21, r1
    16c4:	b9 f1       	breq	.+110    	; 0x1734 <GPIO_readPin+0xc6>
    16c6:	8c 81       	ldd	r24, Y+4	; 0x04
    16c8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ca:	83 30       	cpi	r24, 0x03	; 3
    16cc:	91 05       	cpc	r25, r1
    16ce:	09 f4       	brne	.+2      	; 0x16d2 <GPIO_readPin+0x64>
    16d0:	49 c0       	rjmp	.+146    	; 0x1764 <GPIO_readPin+0xf6>
    16d2:	5f c0       	rjmp	.+190    	; 0x1792 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16d4:	e9 e3       	ldi	r30, 0x39	; 57
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	88 2f       	mov	r24, r24
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	a9 01       	movw	r20, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_readPin+0x7e>
    16e8:	55 95       	asr	r21
    16ea:	47 95       	ror	r20
    16ec:	8a 95       	dec	r24
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_readPin+0x7a>
    16f0:	ca 01       	movw	r24, r20
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	90 70       	andi	r25, 0x00	; 0
    16f6:	88 23       	and	r24, r24
    16f8:	19 f0       	breq	.+6      	; 0x1700 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	89 83       	std	Y+1, r24	; 0x01
    16fe:	49 c0       	rjmp	.+146    	; 0x1792 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	47 c0       	rjmp	.+142    	; 0x1792 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1704:	e6 e3       	ldi	r30, 0x36	; 54
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	88 2f       	mov	r24, r24
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	a9 01       	movw	r20, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_readPin+0xae>
    1718:	55 95       	asr	r21
    171a:	47 95       	ror	r20
    171c:	8a 95       	dec	r24
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_readPin+0xaa>
    1720:	ca 01       	movw	r24, r20
    1722:	81 70       	andi	r24, 0x01	; 1
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	88 23       	and	r24, r24
    1728:	19 f0       	breq	.+6      	; 0x1730 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	89 83       	std	Y+1, r24	; 0x01
    172e:	31 c0       	rjmp	.+98     	; 0x1792 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1730:	19 82       	std	Y+1, r1	; 0x01
    1732:	2f c0       	rjmp	.+94     	; 0x1792 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1734:	e3 e3       	ldi	r30, 0x33	; 51
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_readPin+0xde>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_readPin+0xda>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	88 23       	and	r24, r24
    1758:	19 f0       	breq	.+6      	; 0x1760 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	19 c0       	rjmp	.+50     	; 0x1792 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	17 c0       	rjmp	.+46     	; 0x1792 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1764:	e0 e3       	ldi	r30, 0x30	; 48
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <GPIO_readPin+0x10e>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <GPIO_readPin+0x10a>
    1780:	ca 01       	movw	r24, r20
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	88 23       	and	r24, r24
    1788:	19 f0       	breq	.+6      	; 0x1790 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	01 c0       	rjmp	.+2      	; 0x1792 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1790:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1792:	89 81       	ldd	r24, Y+1	; 0x01
}
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_setupPortDirection+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <GPIO_setupPortDirection+0x8>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	84 30       	cpi	r24, 0x04	; 4
    17b8:	90 f5       	brcc	.+100    	; 0x181e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	3c 83       	std	Y+4, r19	; 0x04
    17c2:	2b 83       	std	Y+3, r18	; 0x03
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	81 30       	cpi	r24, 0x01	; 1
    17ca:	91 05       	cpc	r25, r1
    17cc:	d1 f0       	breq	.+52     	; 0x1802 <GPIO_setupPortDirection+0x5e>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	2c f4       	brge	.+10     	; 0x17e2 <GPIO_setupPortDirection+0x3e>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	00 97       	sbiw	r24, 0x00	; 0
    17de:	61 f0       	breq	.+24     	; 0x17f8 <GPIO_setupPortDirection+0x54>
    17e0:	1e c0       	rjmp	.+60     	; 0x181e <GPIO_setupPortDirection+0x7a>
    17e2:	2b 81       	ldd	r18, Y+3	; 0x03
    17e4:	3c 81       	ldd	r19, Y+4	; 0x04
    17e6:	22 30       	cpi	r18, 0x02	; 2
    17e8:	31 05       	cpc	r19, r1
    17ea:	81 f0       	breq	.+32     	; 0x180c <GPIO_setupPortDirection+0x68>
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	91 05       	cpc	r25, r1
    17f4:	81 f0       	breq	.+32     	; 0x1816 <GPIO_setupPortDirection+0x72>
    17f6:	13 c0       	rjmp	.+38     	; 0x181e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17f8:	ea e3       	ldi	r30, 0x3A	; 58
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	0e c0       	rjmp	.+28     	; 0x181e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1802:	e7 e3       	ldi	r30, 0x37	; 55
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	80 83       	st	Z, r24
    180a:	09 c0       	rjmp	.+18     	; 0x181e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    180c:	e4 e3       	ldi	r30, 0x34	; 52
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	80 83       	st	Z, r24
    1814:	04 c0       	rjmp	.+8      	; 0x181e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1816:	e1 e3       	ldi	r30, 0x31	; 49
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	80 83       	st	Z, r24
			break;
		}
	}
}
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_writePort+0x6>
    1832:	00 d0       	rcall	.+0      	; 0x1834 <GPIO_writePort+0x8>
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	84 30       	cpi	r24, 0x04	; 4
    1840:	90 f5       	brcc	.+100    	; 0x18a6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	28 2f       	mov	r18, r24
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	3c 83       	std	Y+4, r19	; 0x04
    184a:	2b 83       	std	Y+3, r18	; 0x03
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	91 05       	cpc	r25, r1
    1854:	d1 f0       	breq	.+52     	; 0x188a <GPIO_writePort+0x5e>
    1856:	2b 81       	ldd	r18, Y+3	; 0x03
    1858:	3c 81       	ldd	r19, Y+4	; 0x04
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <GPIO_writePort+0x3e>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	61 f0       	breq	.+24     	; 0x1880 <GPIO_writePort+0x54>
    1868:	1e c0       	rjmp	.+60     	; 0x18a6 <GPIO_writePort+0x7a>
    186a:	2b 81       	ldd	r18, Y+3	; 0x03
    186c:	3c 81       	ldd	r19, Y+4	; 0x04
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	81 f0       	breq	.+32     	; 0x1894 <GPIO_writePort+0x68>
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	83 30       	cpi	r24, 0x03	; 3
    187a:	91 05       	cpc	r25, r1
    187c:	81 f0       	breq	.+32     	; 0x189e <GPIO_writePort+0x72>
    187e:	13 c0       	rjmp	.+38     	; 0x18a6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1880:	eb e3       	ldi	r30, 0x3B	; 59
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
    1888:	0e c0       	rjmp	.+28     	; 0x18a6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	80 83       	st	Z, r24
    1892:	09 c0       	rjmp	.+18     	; 0x18a6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1894:	e5 e3       	ldi	r30, 0x35	; 53
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	80 83       	st	Z, r24
    189c:	04 c0       	rjmp	.+8      	; 0x18a6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    189e:	e2 e3       	ldi	r30, 0x32	; 50
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	80 83       	st	Z, r24
			break;
		}
	}
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <GPIO_readPort+0x6>
    18ba:	00 d0       	rcall	.+0      	; 0x18bc <GPIO_readPort+0x8>
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18c2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	84 30       	cpi	r24, 0x04	; 4
    18c8:	90 f5       	brcc	.+100    	; 0x192e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	3c 83       	std	Y+4, r19	; 0x04
    18d2:	2b 83       	std	Y+3, r18	; 0x03
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	81 30       	cpi	r24, 0x01	; 1
    18da:	91 05       	cpc	r25, r1
    18dc:	d1 f0       	breq	.+52     	; 0x1912 <GPIO_readPort+0x5e>
    18de:	2b 81       	ldd	r18, Y+3	; 0x03
    18e0:	3c 81       	ldd	r19, Y+4	; 0x04
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <GPIO_readPort+0x3e>
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	61 f0       	breq	.+24     	; 0x1908 <GPIO_readPort+0x54>
    18f0:	1e c0       	rjmp	.+60     	; 0x192e <GPIO_readPort+0x7a>
    18f2:	2b 81       	ldd	r18, Y+3	; 0x03
    18f4:	3c 81       	ldd	r19, Y+4	; 0x04
    18f6:	22 30       	cpi	r18, 0x02	; 2
    18f8:	31 05       	cpc	r19, r1
    18fa:	81 f0       	breq	.+32     	; 0x191c <GPIO_readPort+0x68>
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1900:	83 30       	cpi	r24, 0x03	; 3
    1902:	91 05       	cpc	r25, r1
    1904:	81 f0       	breq	.+32     	; 0x1926 <GPIO_readPort+0x72>
    1906:	13 c0       	rjmp	.+38     	; 0x192e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1908:	e9 e3       	ldi	r30, 0x39	; 57
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	0e c0       	rjmp	.+28     	; 0x192e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1912:	e6 e3       	ldi	r30, 0x36	; 54
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	09 c0       	rjmp	.+18     	; 0x192e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    191c:	e3 e3       	ldi	r30, 0x33	; 51
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	04 c0       	rjmp	.+8      	; 0x192e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1926:	e0 e3       	ldi	r30, 0x30	; 48
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	0f 90       	pop	r0
    1938:	cf 91       	pop	r28
    193a:	df 91       	pop	r29
    193c:	08 95       	ret

0000193e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    193e:	df 93       	push	r29
    1940:	cf 93       	push	r28
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	60 97       	sbiw	r28, 0x10	; 16
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	de bf       	out	0x3e, r29	; 62
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	63 e0       	ldi	r22, 0x03	; 3
    1974:	40 e0       	ldi	r20, 0x00	; 0
    1976:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    197a:	82 e0       	ldi	r24, 0x02	; 2
    197c:	64 e0       	ldi	r22, 0x04	; 4
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1984:	82 e0       	ldi	r24, 0x02	; 2
    1986:	65 e0       	ldi	r22, 0x05	; 5
    1988:	40 e0       	ldi	r20, 0x00	; 0
    198a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    198e:	82 e0       	ldi	r24, 0x02	; 2
    1990:	66 e0       	ldi	r22, 0x06	; 6
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	67 e0       	ldi	r22, 0x07	; 7
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19a2:	1f 86       	std	Y+15, r1	; 0x0f
    19a4:	ab c0       	rjmp	.+342    	; 0x1afc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	6f 85       	ldd	r22, Y+15	; 0x0f
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19ba:	18 8a       	std	Y+16, r1	; 0x10
    19bc:	22 c0       	rjmp	.+68     	; 0x1a02 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    19be:	88 89       	ldd	r24, Y+16	; 0x10
    19c0:	98 2f       	mov	r25, r24
    19c2:	9c 5f       	subi	r25, 0xFC	; 252
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	69 2f       	mov	r22, r25
    19c8:	0e 94 37 0b 	call	0x166e	; 0x166e <GPIO_readPin>
    19cc:	88 23       	and	r24, r24
    19ce:	b1 f4       	brne	.+44     	; 0x19fc <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	98 2f       	mov	r25, r24
    19e0:	88 89       	ldd	r24, Y+16	; 0x10
    19e2:	89 0f       	add	r24, r25
    19e4:	8f 5f       	subi	r24, 0xFF	; 255
    19e6:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    19ea:	60 96       	adiw	r28, 0x10	; 16
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	de bf       	out	0x3e, r29	; 62
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	cd bf       	out	0x3d, r28	; 61
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19fc:	88 89       	ldd	r24, Y+16	; 0x10
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	88 8b       	std	Y+16, r24	; 0x10
    1a02:	88 89       	ldd	r24, Y+16	; 0x10
    1a04:	84 30       	cpi	r24, 0x04	; 4
    1a06:	d8 f2       	brcs	.-74     	; 0x19be <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a08:	82 e0       	ldi	r24, 0x02	; 2
    1a0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a0c:	40 e0       	ldi	r20, 0x00	; 0
    1a0e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
    1a12:	80 e0       	ldi	r24, 0x00	; 0
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	a0 ea       	ldi	r26, 0xA0	; 160
    1a18:	b0 e4       	ldi	r27, 0x40	; 64
    1a1a:	8b 87       	std	Y+11, r24	; 0x0b
    1a1c:	9c 87       	std	Y+12, r25	; 0x0c
    1a1e:	ad 87       	std	Y+13, r26	; 0x0d
    1a20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	4a ef       	ldi	r20, 0xFA	; 250
    1a30:	54 e4       	ldi	r21, 0x44	; 68
    1a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8f 83       	std	Y+7, r24	; 0x07
    1a3c:	98 87       	std	Y+8, r25	; 0x08
    1a3e:	a9 87       	std	Y+9, r26	; 0x09
    1a40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a42:	6f 81       	ldd	r22, Y+7	; 0x07
    1a44:	78 85       	ldd	r23, Y+8	; 0x08
    1a46:	89 85       	ldd	r24, Y+9	; 0x09
    1a48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a56:	88 23       	and	r24, r24
    1a58:	2c f4       	brge	.+10     	; 0x1a64 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9e 83       	std	Y+6, r25	; 0x06
    1a60:	8d 83       	std	Y+5, r24	; 0x05
    1a62:	3f c0       	rjmp	.+126    	; 0x1ae2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1a64:	6f 81       	ldd	r22, Y+7	; 0x07
    1a66:	78 85       	ldd	r23, Y+8	; 0x08
    1a68:	89 85       	ldd	r24, Y+9	; 0x09
    1a6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	3f ef       	ldi	r19, 0xFF	; 255
    1a70:	4f e7       	ldi	r20, 0x7F	; 127
    1a72:	57 e4       	ldi	r21, 0x47	; 71
    1a74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a78:	18 16       	cp	r1, r24
    1a7a:	4c f5       	brge	.+82     	; 0x1ace <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	30 e0       	ldi	r19, 0x00	; 0
    1a88:	40 e2       	ldi	r20, 0x20	; 32
    1a8a:	51 e4       	ldi	r21, 0x41	; 65
    1a8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a90:	dc 01       	movw	r26, r24
    1a92:	cb 01       	movw	r24, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	cd 01       	movw	r24, r26
    1a98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a9c:	dc 01       	movw	r26, r24
    1a9e:	cb 01       	movw	r24, r22
    1aa0:	9e 83       	std	Y+6, r25	; 0x06
    1aa2:	8d 83       	std	Y+5, r24	; 0x05
    1aa4:	0f c0       	rjmp	.+30     	; 0x1ac4 <KEYPAD_getPressedKey+0x186>
    1aa6:	88 ec       	ldi	r24, 0xC8	; 200
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9c 83       	std	Y+4, r25	; 0x04
    1aac:	8b 83       	std	Y+3, r24	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	f1 f7       	brne	.-4      	; 0x1ab2 <KEYPAD_getPressedKey+0x174>
    1ab6:	9c 83       	std	Y+4, r25	; 0x04
    1ab8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	00 97       	sbiw	r24, 0x00	; 0
    1aca:	69 f7       	brne	.-38     	; 0x1aa6 <KEYPAD_getPressedKey+0x168>
    1acc:	14 c0       	rjmp	.+40     	; 0x1af6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ace:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad0:	78 85       	ldd	r23, Y+8	; 0x08
    1ad2:	89 85       	ldd	r24, Y+9	; 0x09
    1ad4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9e 83       	std	Y+6, r25	; 0x06
    1ae0:	8d 83       	std	Y+5, r24	; 0x05
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <KEYPAD_getPressedKey+0x1b0>
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af8:	8f 5f       	subi	r24, 0xFF	; 255
    1afa:	8f 87       	std	Y+15, r24	; 0x0f
    1afc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1afe:	84 30       	cpi	r24, 0x04	; 4
    1b00:	08 f4       	brcc	.+2      	; 0x1b04 <KEYPAD_getPressedKey+0x1c6>
    1b02:	51 cf       	rjmp	.-350    	; 0x19a6 <KEYPAD_getPressedKey+0x68>
    1b04:	4e cf       	rjmp	.-356    	; 0x19a2 <KEYPAD_getPressedKey+0x64>

00001b06 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b14:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b16:	8a 81       	ldd	r24, Y+2	; 0x02
    1b18:	28 2f       	mov	r18, r24
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	3c 83       	std	Y+4, r19	; 0x04
    1b1e:	2b 83       	std	Y+3, r18	; 0x03
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	88 30       	cpi	r24, 0x08	; 8
    1b26:	91 05       	cpc	r25, r1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b2a:	70 c0       	rjmp	.+224    	; 0x1c0c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b30:	29 30       	cpi	r18, 0x09	; 9
    1b32:	31 05       	cpc	r19, r1
    1b34:	5c f5       	brge	.+86     	; 0x1b8c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b40:	59 c0       	rjmp	.+178    	; 0x1bf4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b42:	2b 81       	ldd	r18, Y+3	; 0x03
    1b44:	3c 81       	ldd	r19, Y+4	; 0x04
    1b46:	25 30       	cpi	r18, 0x05	; 5
    1b48:	31 05       	cpc	r19, r1
    1b4a:	9c f4       	brge	.+38     	; 0x1b72 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	91 05       	cpc	r25, r1
    1b54:	09 f4       	brne	.+2      	; 0x1b58 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b56:	48 c0       	rjmp	.+144    	; 0x1be8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b58:	2b 81       	ldd	r18, Y+3	; 0x03
    1b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b5c:	23 30       	cpi	r18, 0x03	; 3
    1b5e:	31 05       	cpc	r19, r1
    1b60:	0c f0       	brlt	.+2      	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b62:	45 c0       	rjmp	.+138    	; 0x1bee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b64:	8b 81       	ldd	r24, Y+3	; 0x03
    1b66:	9c 81       	ldd	r25, Y+4	; 0x04
    1b68:	81 30       	cpi	r24, 0x01	; 1
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b6e:	39 c0       	rjmp	.+114    	; 0x1be2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b70:	67 c0       	rjmp	.+206    	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	26 30       	cpi	r18, 0x06	; 6
    1b78:	31 05       	cpc	r19, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b7c:	41 c0       	rjmp	.+130    	; 0x1c00 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	87 30       	cpi	r24, 0x07	; 7
    1b84:	91 05       	cpc	r25, r1
    1b86:	0c f0       	brlt	.+2      	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b88:	3e c0       	rjmp	.+124    	; 0x1c06 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b8a:	37 c0       	rjmp	.+110    	; 0x1bfa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	2c 30       	cpi	r18, 0x0C	; 12
    1b92:	31 05       	cpc	r19, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1b96:	46 c0       	rjmp	.+140    	; 0x1c24 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	8d 30       	cpi	r24, 0x0D	; 13
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	5c f4       	brge	.+22     	; 0x1bb8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ba2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba6:	2a 30       	cpi	r18, 0x0A	; 10
    1ba8:	31 05       	cpc	r19, r1
    1baa:	b1 f1       	breq	.+108    	; 0x1c18 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1bac:	8b 81       	ldd	r24, Y+3	; 0x03
    1bae:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb0:	8b 30       	cpi	r24, 0x0B	; 11
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	a4 f5       	brge	.+104    	; 0x1c1e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1bb6:	2d c0       	rjmp	.+90     	; 0x1c12 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1bb8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bba:	3c 81       	ldd	r19, Y+4	; 0x04
    1bbc:	2e 30       	cpi	r18, 0x0E	; 14
    1bbe:	31 05       	cpc	r19, r1
    1bc0:	b9 f1       	breq	.+110    	; 0x1c30 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	8e 30       	cpi	r24, 0x0E	; 14
    1bc8:	91 05       	cpc	r25, r1
    1bca:	7c f1       	brlt	.+94     	; 0x1c2a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1bcc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bce:	3c 81       	ldd	r19, Y+4	; 0x04
    1bd0:	2f 30       	cpi	r18, 0x0F	; 15
    1bd2:	31 05       	cpc	r19, r1
    1bd4:	79 f1       	breq	.+94     	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	80 31       	cpi	r24, 0x10	; 16
    1bdc:	91 05       	cpc	r25, r1
    1bde:	69 f1       	breq	.+90     	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1be0:	2f c0       	rjmp	.+94     	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1be2:	87 e0       	ldi	r24, 0x07	; 7
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	2e c0       	rjmp	.+92     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1be8:	88 e0       	ldi	r24, 0x08	; 8
    1bea:	89 83       	std	Y+1, r24	; 0x01
    1bec:	2b c0       	rjmp	.+86     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bee:	89 e0       	ldi	r24, 0x09	; 9
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	28 c0       	rjmp	.+80     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1bf4:	85 e2       	ldi	r24, 0x25	; 37
    1bf6:	89 83       	std	Y+1, r24	; 0x01
    1bf8:	25 c0       	rjmp	.+74     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1bfa:	84 e0       	ldi	r24, 0x04	; 4
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	22 c0       	rjmp	.+68     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c00:	85 e0       	ldi	r24, 0x05	; 5
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	1f c0       	rjmp	.+62     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c06:	86 e0       	ldi	r24, 0x06	; 6
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	1c c0       	rjmp	.+56     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c0c:	8a e2       	ldi	r24, 0x2A	; 42
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	19 c0       	rjmp	.+50     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	16 c0       	rjmp	.+44     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c18:	82 e0       	ldi	r24, 0x02	; 2
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	13 c0       	rjmp	.+38     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	10 c0       	rjmp	.+32     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c24:	8d e2       	ldi	r24, 0x2D	; 45
    1c26:	89 83       	std	Y+1, r24	; 0x01
    1c28:	0d c0       	rjmp	.+26     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c2a:	8d e0       	ldi	r24, 0x0D	; 13
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	0a c0       	rjmp	.+20     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c34:	8d e3       	ldi	r24, 0x3D	; 61
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c3a:	8b e2       	ldi	r24, 0x2B	; 43
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	cf 91       	pop	r28
    1c50:	df 91       	pop	r29
    1c52:	08 95       	ret

00001c54 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	cd b7       	in	r28, 0x3d	; 61
    1c5a:	de b7       	in	r29, 0x3e	; 62
    1c5c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	60 e0       	ldi	r22, 0x00	; 0
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	41 e0       	ldi	r20, 0x01	; 1
    1c78:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	6f ef       	ldi	r22, 0xFF	; 255
    1c80:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <GPIO_setupPortDirection>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 ea       	ldi	r26, 0xA0	; 160
    1c8a:	b1 e4       	ldi	r27, 0x41	; 65
    1c8c:	8b 87       	std	Y+11, r24	; 0x0b
    1c8e:	9c 87       	std	Y+12, r25	; 0x0c
    1c90:	ad 87       	std	Y+13, r26	; 0x0d
    1c92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8f 83       	std	Y+7, r24	; 0x07
    1cae:	98 87       	std	Y+8, r25	; 0x08
    1cb0:	a9 87       	std	Y+9, r26	; 0x09
    1cb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <LCD_init+0x82>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9e 83       	std	Y+6, r25	; 0x06
    1cd2:	8d 83       	std	Y+5, r24	; 0x05
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <LCD_init+0x100>
	else if (__tmp > 65535)
    1cd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd8:	78 85       	ldd	r23, Y+8	; 0x08
    1cda:	89 85       	ldd	r24, Y+9	; 0x09
    1cdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <LCD_init+0xe2>
    1d18:	88 ec       	ldi	r24, 0xC8	; 200
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	9c 83       	std	Y+4, r25	; 0x04
    1d1e:	8b 83       	std	Y+3, r24	; 0x03
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	9c 81       	ldd	r25, Y+4	; 0x04
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_init+0xd0>
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <LCD_init+0xc4>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	9a 83       	std	Y+2, r25	; 0x02
    1d5a:	89 83       	std	Y+1, r24	; 0x01
    1d5c:	89 81       	ldd	r24, Y+1	; 0x01
    1d5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_init+0x10c>
    1d64:	9a 83       	std	Y+2, r25	; 0x02
    1d66:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d68:	88 e3       	ldi	r24, 0x38	; 56
    1d6a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d6e:	8c e0       	ldi	r24, 0x0C	; 12
    1d70:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    1d7a:	2e 96       	adiw	r28, 0x0e	; 14
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	e9 97       	sbiw	r28, 0x39	; 57
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
    1da0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	60 e0       	ldi	r22, 0x00	; 0
    1da6:	40 e0       	ldi	r20, 0x00	; 0
    1da8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	bf e3       	ldi	r27, 0x3F	; 63
    1db4:	8d ab       	std	Y+53, r24	; 0x35
    1db6:	9e ab       	std	Y+54, r25	; 0x36
    1db8:	af ab       	std	Y+55, r26	; 0x37
    1dba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dbe:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc0:	8f a9       	ldd	r24, Y+55	; 0x37
    1dc2:	98 ad       	ldd	r25, Y+56	; 0x38
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	4a ef       	ldi	r20, 0xFA	; 250
    1dca:	54 e4       	ldi	r21, 0x44	; 68
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	89 ab       	std	Y+49, r24	; 0x31
    1dd6:	9a ab       	std	Y+50, r25	; 0x32
    1dd8:	ab ab       	std	Y+51, r26	; 0x33
    1dda:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ddc:	69 a9       	ldd	r22, Y+49	; 0x31
    1dde:	7a a9       	ldd	r23, Y+50	; 0x32
    1de0:	8b a9       	ldd	r24, Y+51	; 0x33
    1de2:	9c a9       	ldd	r25, Y+52	; 0x34
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	2c f4       	brge	.+10     	; 0x1dfe <LCD_sendCommand+0x72>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	98 ab       	std	Y+48, r25	; 0x30
    1dfa:	8f a7       	std	Y+47, r24	; 0x2f
    1dfc:	3f c0       	rjmp	.+126    	; 0x1e7c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1e00:	7a a9       	ldd	r23, Y+50	; 0x32
    1e02:	8b a9       	ldd	r24, Y+51	; 0x33
    1e04:	9c a9       	ldd	r25, Y+52	; 0x34
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	3f ef       	ldi	r19, 0xFF	; 255
    1e0a:	4f e7       	ldi	r20, 0x7F	; 127
    1e0c:	57 e4       	ldi	r21, 0x47	; 71
    1e0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e12:	18 16       	cp	r1, r24
    1e14:	4c f5       	brge	.+82     	; 0x1e68 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	6d a9       	ldd	r22, Y+53	; 0x35
    1e18:	7e a9       	ldd	r23, Y+54	; 0x36
    1e1a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e1c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	40 e2       	ldi	r20, 0x20	; 32
    1e24:	51 e4       	ldi	r21, 0x41	; 65
    1e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	98 ab       	std	Y+48, r25	; 0x30
    1e3c:	8f a7       	std	Y+47, r24	; 0x2f
    1e3e:	0f c0       	rjmp	.+30     	; 0x1e5e <LCD_sendCommand+0xd2>
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	9e a7       	std	Y+46, r25	; 0x2e
    1e46:	8d a7       	std	Y+45, r24	; 0x2d
    1e48:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e4a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_sendCommand+0xc0>
    1e50:	9e a7       	std	Y+46, r25	; 0x2e
    1e52:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e56:	98 a9       	ldd	r25, Y+48	; 0x30
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	98 ab       	std	Y+48, r25	; 0x30
    1e5c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e60:	98 a9       	ldd	r25, Y+48	; 0x30
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	69 f7       	brne	.-38     	; 0x1e40 <LCD_sendCommand+0xb4>
    1e66:	14 c0       	rjmp	.+40     	; 0x1e90 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e68:	69 a9       	ldd	r22, Y+49	; 0x31
    1e6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	98 ab       	std	Y+48, r25	; 0x30
    1e7a:	8f a7       	std	Y+47, r24	; 0x2f
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	9c a7       	std	Y+44, r25	; 0x2c
    1e82:	8b a7       	std	Y+43, r24	; 0x2b
    1e84:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e86:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e88:	01 97       	sbiw	r24, 0x01	; 1
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_sendCommand+0xfc>
    1e8c:	9c a7       	std	Y+44, r25	; 0x2c
    1e8e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	62 e0       	ldi	r22, 0x02	; 2
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ea0:	bf e3       	ldi	r27, 0x3F	; 63
    1ea2:	8f a3       	std	Y+39, r24	; 0x27
    1ea4:	98 a7       	std	Y+40, r25	; 0x28
    1ea6:	a9 a7       	std	Y+41, r26	; 0x29
    1ea8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	6f a1       	ldd	r22, Y+39	; 0x27
    1eac:	78 a5       	ldd	r23, Y+40	; 0x28
    1eae:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a ef       	ldi	r20, 0xFA	; 250
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8b a3       	std	Y+35, r24	; 0x23
    1ec4:	9c a3       	std	Y+36, r25	; 0x24
    1ec6:	ad a3       	std	Y+37, r26	; 0x25
    1ec8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eca:	6b a1       	ldd	r22, Y+35	; 0x23
    1ecc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ece:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <LCD_sendCommand+0x160>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9a a3       	std	Y+34, r25	; 0x22
    1ee8:	89 a3       	std	Y+33, r24	; 0x21
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	6f a1       	ldd	r22, Y+39	; 0x27
    1f06:	78 a5       	ldd	r23, Y+40	; 0x28
    1f08:	89 a5       	ldd	r24, Y+41	; 0x29
    1f0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9a a3       	std	Y+34, r25	; 0x22
    1f2a:	89 a3       	std	Y+33, r24	; 0x21
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <LCD_sendCommand+0x1c0>
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	98 a3       	std	Y+32, r25	; 0x20
    1f34:	8f 8f       	std	Y+31, r24	; 0x1f
    1f36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f38:	98 a1       	ldd	r25, Y+32	; 0x20
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_sendCommand+0x1ae>
    1f3e:	98 a3       	std	Y+32, r25	; 0x20
    1f40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	89 a1       	ldd	r24, Y+33	; 0x21
    1f44:	9a a1       	ldd	r25, Y+34	; 0x22
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9a a3       	std	Y+34, r25	; 0x22
    1f4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <LCD_sendCommand+0x1a2>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6b a1       	ldd	r22, Y+35	; 0x23
    1f58:	7c a1       	ldd	r23, Y+36	; 0x24
    1f5a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f5c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9a a3       	std	Y+34, r25	; 0x22
    1f68:	89 a3       	std	Y+33, r24	; 0x21
    1f6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f6e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f70:	8d 8f       	std	Y+29, r24	; 0x1d
    1f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <LCD_sendCommand+0x1ea>
    1f7a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f7c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	69 ad       	ldd	r22, Y+57	; 0x39
    1f82:	0e 94 16 0c 	call	0x182c	; 0x182c <GPIO_writePort>
    1f86:	80 e0       	ldi	r24, 0x00	; 0
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	a0 e8       	ldi	r26, 0x80	; 128
    1f8c:	bf e3       	ldi	r27, 0x3F	; 63
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
    1f90:	9a 8f       	std	Y+26, r25	; 0x1a
    1f92:	ab 8f       	std	Y+27, r26	; 0x1b
    1f94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f96:	69 8d       	ldd	r22, Y+25	; 0x19
    1f98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	30 e0       	ldi	r19, 0x00	; 0
    1fa2:	4a ef       	ldi	r20, 0xFA	; 250
    1fa4:	54 e4       	ldi	r21, 0x44	; 68
    1fa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8d 8b       	std	Y+21, r24	; 0x15
    1fb0:	9e 8b       	std	Y+22, r25	; 0x16
    1fb2:	af 8b       	std	Y+23, r26	; 0x17
    1fb4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fb6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fba:	8f 89       	ldd	r24, Y+23	; 0x17
    1fbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e8       	ldi	r20, 0x80	; 128
    1fc4:	5f e3       	ldi	r21, 0x3F	; 63
    1fc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fca:	88 23       	and	r24, r24
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	3f c0       	rjmp	.+126    	; 0x2056 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	3f ef       	ldi	r19, 0xFF	; 255
    1fe4:	4f e7       	ldi	r20, 0x7F	; 127
    1fe6:	57 e4       	ldi	r21, 0x47	; 71
    1fe8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fec:	18 16       	cp	r1, r24
    1fee:	4c f5       	brge	.+82     	; 0x2042 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ff0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ff2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ff4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ff6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	bc 01       	movw	r22, r24
    200a:	cd 01       	movw	r24, r26
    200c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	9c 8b       	std	Y+20, r25	; 0x14
    2016:	8b 8b       	std	Y+19, r24	; 0x13
    2018:	0f c0       	rjmp	.+30     	; 0x2038 <LCD_sendCommand+0x2ac>
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	89 8b       	std	Y+17, r24	; 0x11
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	9a 89       	ldd	r25, Y+18	; 0x12
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <LCD_sendCommand+0x29a>
    202a:	9a 8b       	std	Y+18, r25	; 0x12
    202c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	9c 89       	ldd	r25, Y+20	; 0x14
    2032:	01 97       	sbiw	r24, 0x01	; 1
    2034:	9c 8b       	std	Y+20, r25	; 0x14
    2036:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2038:	8b 89       	ldd	r24, Y+19	; 0x13
    203a:	9c 89       	ldd	r25, Y+20	; 0x14
    203c:	00 97       	sbiw	r24, 0x00	; 0
    203e:	69 f7       	brne	.-38     	; 0x201a <LCD_sendCommand+0x28e>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2042:	6d 89       	ldd	r22, Y+21	; 0x15
    2044:	7e 89       	ldd	r23, Y+22	; 0x16
    2046:	8f 89       	ldd	r24, Y+23	; 0x17
    2048:	98 8d       	ldd	r25, Y+24	; 0x18
    204a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	9c 8b       	std	Y+20, r25	; 0x14
    2054:	8b 8b       	std	Y+19, r24	; 0x13
    2056:	8b 89       	ldd	r24, Y+19	; 0x13
    2058:	9c 89       	ldd	r25, Y+20	; 0x14
    205a:	98 8b       	std	Y+16, r25	; 0x10
    205c:	8f 87       	std	Y+15, r24	; 0x0f
    205e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2060:	98 89       	ldd	r25, Y+16	; 0x10
    2062:	01 97       	sbiw	r24, 0x01	; 1
    2064:	f1 f7       	brne	.-4      	; 0x2062 <LCD_sendCommand+0x2d6>
    2066:	98 8b       	std	Y+16, r25	; 0x10
    2068:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e8       	ldi	r26, 0x80	; 128
    207a:	bf e3       	ldi	r27, 0x3F	; 63
    207c:	8b 87       	std	Y+11, r24	; 0x0b
    207e:	9c 87       	std	Y+12, r25	; 0x0c
    2080:	ad 87       	std	Y+13, r26	; 0x0d
    2082:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	6b 85       	ldd	r22, Y+11	; 0x0b
    2086:	7c 85       	ldd	r23, Y+12	; 0x0c
    2088:	8d 85       	ldd	r24, Y+13	; 0x0d
    208a:	9e 85       	ldd	r25, Y+14	; 0x0e
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a ef       	ldi	r20, 0xFA	; 250
    2092:	54 e4       	ldi	r21, 0x44	; 68
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8f 83       	std	Y+7, r24	; 0x07
    209e:	98 87       	std	Y+8, r25	; 0x08
    20a0:	a9 87       	std	Y+9, r26	; 0x09
    20a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20a4:	6f 81       	ldd	r22, Y+7	; 0x07
    20a6:	78 85       	ldd	r23, Y+8	; 0x08
    20a8:	89 85       	ldd	r24, Y+9	; 0x09
    20aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	6b 85       	ldd	r22, Y+11	; 0x0b
    20e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <LCD_sendCommand+0x39a>
    2108:	88 ec       	ldi	r24, 0xC8	; 200
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <LCD_sendCommand+0x388>
    2118:	9c 83       	std	Y+4, r25	; 0x04
    211a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	8d 81       	ldd	r24, Y+5	; 0x05
    211e:	9e 81       	ldd	r25, Y+6	; 0x06
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9e 83       	std	Y+6, r25	; 0x06
    2124:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	8d 81       	ldd	r24, Y+5	; 0x05
    2128:	9e 81       	ldd	r25, Y+6	; 0x06
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <LCD_sendCommand+0x37c>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6f 81       	ldd	r22, Y+7	; 0x07
    2132:	78 85       	ldd	r23, Y+8	; 0x08
    2134:	89 85       	ldd	r24, Y+9	; 0x09
    2136:	9a 85       	ldd	r25, Y+10	; 0x0a
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9e 83       	std	Y+6, r25	; 0x06
    2142:	8d 83       	std	Y+5, r24	; 0x05
    2144:	8d 81       	ldd	r24, Y+5	; 0x05
    2146:	9e 81       	ldd	r25, Y+6	; 0x06
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	9a 81       	ldd	r25, Y+2	; 0x02
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <LCD_sendCommand+0x3c4>
    2154:	9a 83       	std	Y+2, r25	; 0x02
    2156:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2158:	e9 96       	adiw	r28, 0x39	; 57
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	e9 97       	sbiw	r28, 0x39	; 57
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	60 e0       	ldi	r22, 0x00	; 0
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	a0 e8       	ldi	r26, 0x80	; 128
    2190:	bf e3       	ldi	r27, 0x3F	; 63
    2192:	8d ab       	std	Y+53, r24	; 0x35
    2194:	9e ab       	std	Y+54, r25	; 0x36
    2196:	af ab       	std	Y+55, r26	; 0x37
    2198:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219a:	6d a9       	ldd	r22, Y+53	; 0x35
    219c:	7e a9       	ldd	r23, Y+54	; 0x36
    219e:	8f a9       	ldd	r24, Y+55	; 0x37
    21a0:	98 ad       	ldd	r25, Y+56	; 0x38
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a ef       	ldi	r20, 0xFA	; 250
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	89 ab       	std	Y+49, r24	; 0x31
    21b4:	9a ab       	std	Y+50, r25	; 0x32
    21b6:	ab ab       	std	Y+51, r26	; 0x33
    21b8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ba:	69 a9       	ldd	r22, Y+49	; 0x31
    21bc:	7a a9       	ldd	r23, Y+50	; 0x32
    21be:	8b a9       	ldd	r24, Y+51	; 0x33
    21c0:	9c a9       	ldd	r25, Y+52	; 0x34
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <LCD_displayCharacter+0x72>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	98 ab       	std	Y+48, r25	; 0x30
    21d8:	8f a7       	std	Y+47, r24	; 0x2f
    21da:	3f c0       	rjmp	.+126    	; 0x225a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	3f ef       	ldi	r19, 0xFF	; 255
    21e8:	4f e7       	ldi	r20, 0x7F	; 127
    21ea:	57 e4       	ldi	r21, 0x47	; 71
    21ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f0:	18 16       	cp	r1, r24
    21f2:	4c f5       	brge	.+82     	; 0x2246 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f4:	6d a9       	ldd	r22, Y+53	; 0x35
    21f6:	7e a9       	ldd	r23, Y+54	; 0x36
    21f8:	8f a9       	ldd	r24, Y+55	; 0x37
    21fa:	98 ad       	ldd	r25, Y+56	; 0x38
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	30 e0       	ldi	r19, 0x00	; 0
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	51 e4       	ldi	r21, 0x41	; 65
    2204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	98 ab       	std	Y+48, r25	; 0x30
    221a:	8f a7       	std	Y+47, r24	; 0x2f
    221c:	0f c0       	rjmp	.+30     	; 0x223c <LCD_displayCharacter+0xd2>
    221e:	88 ec       	ldi	r24, 0xC8	; 200
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9e a7       	std	Y+46, r25	; 0x2e
    2224:	8d a7       	std	Y+45, r24	; 0x2d
    2226:	8d a5       	ldd	r24, Y+45	; 0x2d
    2228:	9e a5       	ldd	r25, Y+46	; 0x2e
    222a:	01 97       	sbiw	r24, 0x01	; 1
    222c:	f1 f7       	brne	.-4      	; 0x222a <LCD_displayCharacter+0xc0>
    222e:	9e a7       	std	Y+46, r25	; 0x2e
    2230:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2232:	8f a5       	ldd	r24, Y+47	; 0x2f
    2234:	98 a9       	ldd	r25, Y+48	; 0x30
    2236:	01 97       	sbiw	r24, 0x01	; 1
    2238:	98 ab       	std	Y+48, r25	; 0x30
    223a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223c:	8f a5       	ldd	r24, Y+47	; 0x2f
    223e:	98 a9       	ldd	r25, Y+48	; 0x30
    2240:	00 97       	sbiw	r24, 0x00	; 0
    2242:	69 f7       	brne	.-38     	; 0x221e <LCD_displayCharacter+0xb4>
    2244:	14 c0       	rjmp	.+40     	; 0x226e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2246:	69 a9       	ldd	r22, Y+49	; 0x31
    2248:	7a a9       	ldd	r23, Y+50	; 0x32
    224a:	8b a9       	ldd	r24, Y+51	; 0x33
    224c:	9c a9       	ldd	r25, Y+52	; 0x34
    224e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	98 ab       	std	Y+48, r25	; 0x30
    2258:	8f a7       	std	Y+47, r24	; 0x2f
    225a:	8f a5       	ldd	r24, Y+47	; 0x2f
    225c:	98 a9       	ldd	r25, Y+48	; 0x30
    225e:	9c a7       	std	Y+44, r25	; 0x2c
    2260:	8b a7       	std	Y+43, r24	; 0x2b
    2262:	8b a5       	ldd	r24, Y+43	; 0x2b
    2264:	9c a5       	ldd	r25, Y+44	; 0x2c
    2266:	01 97       	sbiw	r24, 0x01	; 1
    2268:	f1 f7       	brne	.-4      	; 0x2266 <LCD_displayCharacter+0xfc>
    226a:	9c a7       	std	Y+44, r25	; 0x2c
    226c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    226e:	81 e0       	ldi	r24, 0x01	; 1
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	41 e0       	ldi	r20, 0x01	; 1
    2274:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	a0 e8       	ldi	r26, 0x80	; 128
    227e:	bf e3       	ldi	r27, 0x3F	; 63
    2280:	8f a3       	std	Y+39, r24	; 0x27
    2282:	98 a7       	std	Y+40, r25	; 0x28
    2284:	a9 a7       	std	Y+41, r26	; 0x29
    2286:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2288:	6f a1       	ldd	r22, Y+39	; 0x27
    228a:	78 a5       	ldd	r23, Y+40	; 0x28
    228c:	89 a5       	ldd	r24, Y+41	; 0x29
    228e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	4a ef       	ldi	r20, 0xFA	; 250
    2296:	54 e4       	ldi	r21, 0x44	; 68
    2298:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8b a3       	std	Y+35, r24	; 0x23
    22a2:	9c a3       	std	Y+36, r25	; 0x24
    22a4:	ad a3       	std	Y+37, r26	; 0x25
    22a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22a8:	6b a1       	ldd	r22, Y+35	; 0x23
    22aa:	7c a1       	ldd	r23, Y+36	; 0x24
    22ac:	8d a1       	ldd	r24, Y+37	; 0x25
    22ae:	9e a1       	ldd	r25, Y+38	; 0x26
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	2c f4       	brge	.+10     	; 0x22ca <LCD_displayCharacter+0x160>
		__ticks = 1;
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	9a a3       	std	Y+34, r25	; 0x22
    22c6:	89 a3       	std	Y+33, r24	; 0x21
    22c8:	3f c0       	rjmp	.+126    	; 0x2348 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f ef       	ldi	r19, 0xFF	; 255
    22d6:	4f e7       	ldi	r20, 0x7F	; 127
    22d8:	57 e4       	ldi	r21, 0x47	; 71
    22da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22de:	18 16       	cp	r1, r24
    22e0:	4c f5       	brge	.+82     	; 0x2334 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22e2:	6f a1       	ldd	r22, Y+39	; 0x27
    22e4:	78 a5       	ldd	r23, Y+40	; 0x28
    22e6:	89 a5       	ldd	r24, Y+41	; 0x29
    22e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e2       	ldi	r20, 0x20	; 32
    22f0:	51 e4       	ldi	r21, 0x41	; 65
    22f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	bc 01       	movw	r22, r24
    22fc:	cd 01       	movw	r24, r26
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9a a3       	std	Y+34, r25	; 0x22
    2308:	89 a3       	std	Y+33, r24	; 0x21
    230a:	0f c0       	rjmp	.+30     	; 0x232a <LCD_displayCharacter+0x1c0>
    230c:	88 ec       	ldi	r24, 0xC8	; 200
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	98 a3       	std	Y+32, r25	; 0x20
    2312:	8f 8f       	std	Y+31, r24	; 0x1f
    2314:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2316:	98 a1       	ldd	r25, Y+32	; 0x20
    2318:	01 97       	sbiw	r24, 0x01	; 1
    231a:	f1 f7       	brne	.-4      	; 0x2318 <LCD_displayCharacter+0x1ae>
    231c:	98 a3       	std	Y+32, r25	; 0x20
    231e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	9a a1       	ldd	r25, Y+34	; 0x22
    2324:	01 97       	sbiw	r24, 0x01	; 1
    2326:	9a a3       	std	Y+34, r25	; 0x22
    2328:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    232a:	89 a1       	ldd	r24, Y+33	; 0x21
    232c:	9a a1       	ldd	r25, Y+34	; 0x22
    232e:	00 97       	sbiw	r24, 0x00	; 0
    2330:	69 f7       	brne	.-38     	; 0x230c <LCD_displayCharacter+0x1a2>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2334:	6b a1       	ldd	r22, Y+35	; 0x23
    2336:	7c a1       	ldd	r23, Y+36	; 0x24
    2338:	8d a1       	ldd	r24, Y+37	; 0x25
    233a:	9e a1       	ldd	r25, Y+38	; 0x26
    233c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	9a a3       	std	Y+34, r25	; 0x22
    2346:	89 a3       	std	Y+33, r24	; 0x21
    2348:	89 a1       	ldd	r24, Y+33	; 0x21
    234a:	9a a1       	ldd	r25, Y+34	; 0x22
    234c:	9e 8f       	std	Y+30, r25	; 0x1e
    234e:	8d 8f       	std	Y+29, r24	; 0x1d
    2350:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2352:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	f1 f7       	brne	.-4      	; 0x2354 <LCD_displayCharacter+0x1ea>
    2358:	9e 8f       	std	Y+30, r25	; 0x1e
    235a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	69 ad       	ldd	r22, Y+57	; 0x39
    2360:	0e 94 16 0c 	call	0x182c	; 0x182c <GPIO_writePort>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	a0 e8       	ldi	r26, 0x80	; 128
    236a:	bf e3       	ldi	r27, 0x3F	; 63
    236c:	89 8f       	std	Y+25, r24	; 0x19
    236e:	9a 8f       	std	Y+26, r25	; 0x1a
    2370:	ab 8f       	std	Y+27, r26	; 0x1b
    2372:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	69 8d       	ldd	r22, Y+25	; 0x19
    2376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    237a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8d 8b       	std	Y+21, r24	; 0x15
    238e:	9e 8b       	std	Y+22, r25	; 0x16
    2390:	af 8b       	std	Y+23, r26	; 0x17
    2392:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2394:	6d 89       	ldd	r22, Y+21	; 0x15
    2396:	7e 89       	ldd	r23, Y+22	; 0x16
    2398:	8f 89       	ldd	r24, Y+23	; 0x17
    239a:	98 8d       	ldd	r25, Y+24	; 0x18
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9c 8b       	std	Y+20, r25	; 0x14
    23b2:	8b 8b       	std	Y+19, r24	; 0x13
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	69 8d       	ldd	r22, Y+25	; 0x19
    23d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9c 8b       	std	Y+20, r25	; 0x14
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <LCD_displayCharacter+0x2ac>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9a 8b       	std	Y+18, r25	; 0x12
    23fe:	89 8b       	std	Y+17, r24	; 0x11
    2400:	89 89       	ldd	r24, Y+17	; 0x11
    2402:	9a 89       	ldd	r25, Y+18	; 0x12
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <LCD_displayCharacter+0x29a>
    2408:	9a 8b       	std	Y+18, r25	; 0x12
    240a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8b 89       	ldd	r24, Y+19	; 0x13
    240e:	9c 89       	ldd	r25, Y+20	; 0x14
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9c 8b       	std	Y+20, r25	; 0x14
    2414:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8b 89       	ldd	r24, Y+19	; 0x13
    2418:	9c 89       	ldd	r25, Y+20	; 0x14
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <LCD_displayCharacter+0x28e>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6d 89       	ldd	r22, Y+21	; 0x15
    2422:	7e 89       	ldd	r23, Y+22	; 0x16
    2424:	8f 89       	ldd	r24, Y+23	; 0x17
    2426:	98 8d       	ldd	r25, Y+24	; 0x18
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	98 8b       	std	Y+16, r25	; 0x10
    243a:	8f 87       	std	Y+15, r24	; 0x0f
    243c:	8f 85       	ldd	r24, Y+15	; 0x0f
    243e:	98 89       	ldd	r25, Y+16	; 0x10
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <LCD_displayCharacter+0x2d6>
    2444:	98 8b       	std	Y+16, r25	; 0x10
    2446:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <GPIO_writePin>
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a0 e8       	ldi	r26, 0x80	; 128
    2458:	bf e3       	ldi	r27, 0x3F	; 63
    245a:	8b 87       	std	Y+11, r24	; 0x0b
    245c:	9c 87       	std	Y+12, r25	; 0x0c
    245e:	ad 87       	std	Y+13, r26	; 0x0d
    2460:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2462:	6b 85       	ldd	r22, Y+11	; 0x0b
    2464:	7c 85       	ldd	r23, Y+12	; 0x0c
    2466:	8d 85       	ldd	r24, Y+13	; 0x0d
    2468:	9e 85       	ldd	r25, Y+14	; 0x0e
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	4a ef       	ldi	r20, 0xFA	; 250
    2470:	54 e4       	ldi	r21, 0x44	; 68
    2472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8f 83       	std	Y+7, r24	; 0x07
    247c:	98 87       	std	Y+8, r25	; 0x08
    247e:	a9 87       	std	Y+9, r26	; 0x09
    2480:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e8       	ldi	r20, 0x80	; 128
    2490:	5f e3       	ldi	r21, 0x3F	; 63
    2492:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2496:	88 23       	and	r24, r24
    2498:	2c f4       	brge	.+10     	; 0x24a4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9e 83       	std	Y+6, r25	; 0x06
    24a0:	8d 83       	std	Y+5, r24	; 0x05
    24a2:	3f c0       	rjmp	.+126    	; 0x2522 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24a4:	6f 81       	ldd	r22, Y+7	; 0x07
    24a6:	78 85       	ldd	r23, Y+8	; 0x08
    24a8:	89 85       	ldd	r24, Y+9	; 0x09
    24aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	3f ef       	ldi	r19, 0xFF	; 255
    24b0:	4f e7       	ldi	r20, 0x7F	; 127
    24b2:	57 e4       	ldi	r21, 0x47	; 71
    24b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24b8:	18 16       	cp	r1, r24
    24ba:	4c f5       	brge	.+82     	; 0x250e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24be:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e2       	ldi	r20, 0x20	; 32
    24ca:	51 e4       	ldi	r21, 0x41	; 65
    24cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	bc 01       	movw	r22, r24
    24d6:	cd 01       	movw	r24, r26
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9e 83       	std	Y+6, r25	; 0x06
    24e2:	8d 83       	std	Y+5, r24	; 0x05
    24e4:	0f c0       	rjmp	.+30     	; 0x2504 <LCD_displayCharacter+0x39a>
    24e6:	88 ec       	ldi	r24, 0xC8	; 200
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	9c 83       	std	Y+4, r25	; 0x04
    24ec:	8b 83       	std	Y+3, r24	; 0x03
    24ee:	8b 81       	ldd	r24, Y+3	; 0x03
    24f0:	9c 81       	ldd	r25, Y+4	; 0x04
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	f1 f7       	brne	.-4      	; 0x24f2 <LCD_displayCharacter+0x388>
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	9e 81       	ldd	r25, Y+6	; 0x06
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9e 83       	std	Y+6, r25	; 0x06
    2502:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2504:	8d 81       	ldd	r24, Y+5	; 0x05
    2506:	9e 81       	ldd	r25, Y+6	; 0x06
    2508:	00 97       	sbiw	r24, 0x00	; 0
    250a:	69 f7       	brne	.-38     	; 0x24e6 <LCD_displayCharacter+0x37c>
    250c:	14 c0       	rjmp	.+40     	; 0x2536 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250e:	6f 81       	ldd	r22, Y+7	; 0x07
    2510:	78 85       	ldd	r23, Y+8	; 0x08
    2512:	89 85       	ldd	r24, Y+9	; 0x09
    2514:	9a 85       	ldd	r25, Y+10	; 0x0a
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	9a 83       	std	Y+2, r25	; 0x02
    2528:	89 83       	std	Y+1, r24	; 0x01
    252a:	89 81       	ldd	r24, Y+1	; 0x01
    252c:	9a 81       	ldd	r25, Y+2	; 0x02
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	f1 f7       	brne	.-4      	; 0x252e <LCD_displayCharacter+0x3c4>
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2536:	e9 96       	adiw	r28, 0x39	; 57
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret

00002548 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2548:	df 93       	push	r29
    254a:	cf 93       	push	r28
    254c:	00 d0       	rcall	.+0      	; 0x254e <LCD_displayString+0x6>
    254e:	0f 92       	push	r0
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
    2554:	9b 83       	std	Y+3, r25	; 0x03
    2556:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2558:	19 82       	std	Y+1, r1	; 0x01
    255a:	0e c0       	rjmp	.+28     	; 0x2578 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    255c:	89 81       	ldd	r24, Y+1	; 0x01
    255e:	28 2f       	mov	r18, r24
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	8a 81       	ldd	r24, Y+2	; 0x02
    2564:	9b 81       	ldd	r25, Y+3	; 0x03
    2566:	fc 01       	movw	r30, r24
    2568:	e2 0f       	add	r30, r18
    256a:	f3 1f       	adc	r31, r19
    256c:	80 81       	ld	r24, Z
    256e:	0e 94 b5 10 	call	0x216a	; 0x216a <LCD_displayCharacter>
		i++;
    2572:	89 81       	ldd	r24, Y+1	; 0x01
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	28 2f       	mov	r18, r24
    257c:	30 e0       	ldi	r19, 0x00	; 0
    257e:	8a 81       	ldd	r24, Y+2	; 0x02
    2580:	9b 81       	ldd	r25, Y+3	; 0x03
    2582:	fc 01       	movw	r30, r24
    2584:	e2 0f       	add	r30, r18
    2586:	f3 1f       	adc	r31, r19
    2588:	80 81       	ld	r24, Z
    258a:	88 23       	and	r24, r24
    258c:	39 f7       	brne	.-50     	; 0x255c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <LCD_moveCursor+0x6>
    25a0:	00 d0       	rcall	.+0      	; 0x25a2 <LCD_moveCursor+0x8>
    25a2:	0f 92       	push	r0
    25a4:	cd b7       	in	r28, 0x3d	; 61
    25a6:	de b7       	in	r29, 0x3e	; 62
    25a8:	8a 83       	std	Y+2, r24	; 0x02
    25aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	28 2f       	mov	r18, r24
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	3d 83       	std	Y+5, r19	; 0x05
    25b4:	2c 83       	std	Y+4, r18	; 0x04
    25b6:	8c 81       	ldd	r24, Y+4	; 0x04
    25b8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ba:	81 30       	cpi	r24, 0x01	; 1
    25bc:	91 05       	cpc	r25, r1
    25be:	c1 f0       	breq	.+48     	; 0x25f0 <LCD_moveCursor+0x56>
    25c0:	2c 81       	ldd	r18, Y+4	; 0x04
    25c2:	3d 81       	ldd	r19, Y+5	; 0x05
    25c4:	22 30       	cpi	r18, 0x02	; 2
    25c6:	31 05       	cpc	r19, r1
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <LCD_moveCursor+0x3a>
    25ca:	8c 81       	ldd	r24, Y+4	; 0x04
    25cc:	9d 81       	ldd	r25, Y+5	; 0x05
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	61 f0       	breq	.+24     	; 0x25ea <LCD_moveCursor+0x50>
    25d2:	19 c0       	rjmp	.+50     	; 0x2606 <LCD_moveCursor+0x6c>
    25d4:	2c 81       	ldd	r18, Y+4	; 0x04
    25d6:	3d 81       	ldd	r19, Y+5	; 0x05
    25d8:	22 30       	cpi	r18, 0x02	; 2
    25da:	31 05       	cpc	r19, r1
    25dc:	69 f0       	breq	.+26     	; 0x25f8 <LCD_moveCursor+0x5e>
    25de:	8c 81       	ldd	r24, Y+4	; 0x04
    25e0:	9d 81       	ldd	r25, Y+5	; 0x05
    25e2:	83 30       	cpi	r24, 0x03	; 3
    25e4:	91 05       	cpc	r25, r1
    25e6:	61 f0       	breq	.+24     	; 0x2600 <LCD_moveCursor+0x66>
    25e8:	0e c0       	rjmp	.+28     	; 0x2606 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	0b c0       	rjmp	.+22     	; 0x2606 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	80 5c       	subi	r24, 0xC0	; 192
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	80 5f       	subi	r24, 0xF0	; 240
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	03 c0       	rjmp	.+6      	; 0x2606 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	80 5b       	subi	r24, 0xB0	; 176
    2604:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	80 68       	ori	r24, 0x80	; 128
    260a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	0f 90       	pop	r0
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    261e:	df 93       	push	r29
    2620:	cf 93       	push	r28
    2622:	00 d0       	rcall	.+0      	; 0x2624 <LCD_displayStringRowColumn+0x6>
    2624:	00 d0       	rcall	.+0      	; 0x2626 <LCD_displayStringRowColumn+0x8>
    2626:	cd b7       	in	r28, 0x3d	; 61
    2628:	de b7       	in	r29, 0x3e	; 62
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	6a 83       	std	Y+2, r22	; 0x02
    262e:	5c 83       	std	Y+4, r21	; 0x04
    2630:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	6a 81       	ldd	r22, Y+2	; 0x02
    2636:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
}
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	cf 91       	pop	r28
    264c:	df 91       	pop	r29
    264e:	08 95       	ret

00002650 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2650:	df 93       	push	r29
    2652:	cf 93       	push	r28
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	62 97       	sbiw	r28, 0x12	; 18
    265a:	0f b6       	in	r0, 0x3f	; 63
    265c:	f8 94       	cli
    265e:	de bf       	out	0x3e, r29	; 62
    2660:	0f be       	out	0x3f, r0	; 63
    2662:	cd bf       	out	0x3d, r28	; 61
    2664:	9a 8b       	std	Y+18, r25	; 0x12
    2666:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2668:	89 89       	ldd	r24, Y+17	; 0x11
    266a:	9a 89       	ldd	r25, Y+18	; 0x12
    266c:	9e 01       	movw	r18, r28
    266e:	2f 5f       	subi	r18, 0xFF	; 255
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	b9 01       	movw	r22, r18
    2674:	4a e0       	ldi	r20, 0x0A	; 10
    2676:	50 e0       	ldi	r21, 0x00	; 0
    2678:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <itoa>
   LCD_displayString(buff); /* Display the string */
    267c:	ce 01       	movw	r24, r28
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	0e 94 a4 12 	call	0x2548	; 0x2548 <LCD_displayString>
}
    2684:	62 96       	adiw	r28, 0x12	; 18
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_sendCommand>
}
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <__vector_9>:

/*                    Global Variables                     */
static volatile void(*g_callBackPtr)(void)= NULL_Ptr;

/*                       ISR                               */
ISR(TIMER1_OVF_vect){
    26aa:	1f 92       	push	r1
    26ac:	0f 92       	push	r0
    26ae:	0f b6       	in	r0, 0x3f	; 63
    26b0:	0f 92       	push	r0
    26b2:	11 24       	eor	r1, r1
    26b4:	2f 93       	push	r18
    26b6:	3f 93       	push	r19
    26b8:	4f 93       	push	r20
    26ba:	5f 93       	push	r21
    26bc:	6f 93       	push	r22
    26be:	7f 93       	push	r23
    26c0:	8f 93       	push	r24
    26c2:	9f 93       	push	r25
    26c4:	af 93       	push	r26
    26c6:	bf 93       	push	r27
    26c8:	ef 93       	push	r30
    26ca:	ff 93       	push	r31
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_Ptr){
    26d4:	80 91 e4 00 	lds	r24, 0x00E4
    26d8:	90 91 e5 00 	lds	r25, 0x00E5
    26dc:	00 97       	sbiw	r24, 0x00	; 0
    26de:	29 f0       	breq	.+10     	; 0x26ea <__vector_9+0x40>
		(*g_callBackPtr)();
    26e0:	e0 91 e4 00 	lds	r30, 0x00E4
    26e4:	f0 91 e5 00 	lds	r31, 0x00E5
    26e8:	09 95       	icall
	}
}
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	ff 91       	pop	r31
    26f0:	ef 91       	pop	r30
    26f2:	bf 91       	pop	r27
    26f4:	af 91       	pop	r26
    26f6:	9f 91       	pop	r25
    26f8:	8f 91       	pop	r24
    26fa:	7f 91       	pop	r23
    26fc:	6f 91       	pop	r22
    26fe:	5f 91       	pop	r21
    2700:	4f 91       	pop	r20
    2702:	3f 91       	pop	r19
    2704:	2f 91       	pop	r18
    2706:	0f 90       	pop	r0
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	0f 90       	pop	r0
    270c:	1f 90       	pop	r1
    270e:	18 95       	reti

00002710 <__vector_7>:


ISR(TIMER1_COMPA_vect){
    2710:	1f 92       	push	r1
    2712:	0f 92       	push	r0
    2714:	0f b6       	in	r0, 0x3f	; 63
    2716:	0f 92       	push	r0
    2718:	11 24       	eor	r1, r1
    271a:	2f 93       	push	r18
    271c:	3f 93       	push	r19
    271e:	4f 93       	push	r20
    2720:	5f 93       	push	r21
    2722:	6f 93       	push	r22
    2724:	7f 93       	push	r23
    2726:	8f 93       	push	r24
    2728:	9f 93       	push	r25
    272a:	af 93       	push	r26
    272c:	bf 93       	push	r27
    272e:	ef 93       	push	r30
    2730:	ff 93       	push	r31
    2732:	df 93       	push	r29
    2734:	cf 93       	push	r28
    2736:	cd b7       	in	r28, 0x3d	; 61
    2738:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_Ptr){
    273a:	80 91 e4 00 	lds	r24, 0x00E4
    273e:	90 91 e5 00 	lds	r25, 0x00E5
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	29 f0       	breq	.+10     	; 0x2750 <__vector_7+0x40>
		(*g_callBackPtr)();
    2746:	e0 91 e4 00 	lds	r30, 0x00E4
    274a:	f0 91 e5 00 	lds	r31, 0x00E5
    274e:	09 95       	icall
	}
}
    2750:	cf 91       	pop	r28
    2752:	df 91       	pop	r29
    2754:	ff 91       	pop	r31
    2756:	ef 91       	pop	r30
    2758:	bf 91       	pop	r27
    275a:	af 91       	pop	r26
    275c:	9f 91       	pop	r25
    275e:	8f 91       	pop	r24
    2760:	7f 91       	pop	r23
    2762:	6f 91       	pop	r22
    2764:	5f 91       	pop	r21
    2766:	4f 91       	pop	r20
    2768:	3f 91       	pop	r19
    276a:	2f 91       	pop	r18
    276c:	0f 90       	pop	r0
    276e:	0f be       	out	0x3f, r0	; 63
    2770:	0f 90       	pop	r0
    2772:	1f 90       	pop	r1
    2774:	18 95       	reti

00002776 <Timer1_init>:


/*                       Functions                        */

/* To initialize the Timer */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	00 d0       	rcall	.+0      	; 0x277c <Timer1_init+0x6>
    277c:	00 d0       	rcall	.+0      	; 0x277e <Timer1_init+0x8>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	9a 83       	std	Y+2, r25	; 0x02
    2784:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=Config_Ptr->initial_value;
    2786:	ac e4       	ldi	r26, 0x4C	; 76
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	e9 81       	ldd	r30, Y+1	; 0x01
    278c:	fa 81       	ldd	r31, Y+2	; 0x02
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	11 96       	adiw	r26, 0x01	; 1
    2794:	9c 93       	st	X, r25
    2796:	8e 93       	st	-X, r24
	SREG|=(1<<7);
    2798:	af e5       	ldi	r26, 0x5F	; 95
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	ef e5       	ldi	r30, 0x5F	; 95
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 68       	ori	r24, 0x80	; 128
    27a4:	8c 93       	st	X, r24
	TCCR1A=(1<<COM1A1)|(1<<FOC1A)|(1<<FOC1B);
    27a6:	ef e4       	ldi	r30, 0x4F	; 79
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	8c e8       	ldi	r24, 0x8C	; 140
    27ac:	80 83       	st	Z, r24
	TCCR1B=(TCCR1B&0xF8)|(Config_Ptr->prescaler);
    27ae:	ae e4       	ldi	r26, 0x4E	; 78
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	ee e4       	ldi	r30, 0x4E	; 78
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	98 2f       	mov	r25, r24
    27ba:	98 7f       	andi	r25, 0xF8	; 248
    27bc:	e9 81       	ldd	r30, Y+1	; 0x01
    27be:	fa 81       	ldd	r31, Y+2	; 0x02
    27c0:	84 81       	ldd	r24, Z+4	; 0x04
    27c2:	89 2b       	or	r24, r25
    27c4:	8c 93       	st	X, r24

	switch(Config_Ptr->mode){
    27c6:	e9 81       	ldd	r30, Y+1	; 0x01
    27c8:	fa 81       	ldd	r31, Y+2	; 0x02
    27ca:	85 81       	ldd	r24, Z+5	; 0x05
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	3c 83       	std	Y+4, r19	; 0x04
    27d2:	2b 83       	std	Y+3, r18	; 0x03
    27d4:	8b 81       	ldd	r24, Y+3	; 0x03
    27d6:	9c 81       	ldd	r25, Y+4	; 0x04
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	31 f0       	breq	.+12     	; 0x27e8 <Timer1_init+0x72>
    27dc:	2b 81       	ldd	r18, Y+3	; 0x03
    27de:	3c 81       	ldd	r19, Y+4	; 0x04
    27e0:	24 30       	cpi	r18, 0x04	; 4
    27e2:	31 05       	cpc	r19, r1
    27e4:	a1 f0       	breq	.+40     	; 0x280e <Timer1_init+0x98>
    27e6:	38 c0       	rjmp	.+112    	; 0x2858 <Timer1_init+0xe2>
		case Normal:
			TCCR1A=(TCCR1A|0xFC)|(Config_Ptr->mode);
    27e8:	af e4       	ldi	r26, 0x4F	; 79
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	ef e4       	ldi	r30, 0x4F	; 79
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	90 81       	ld	r25, Z
    27f2:	e9 81       	ldd	r30, Y+1	; 0x01
    27f4:	fa 81       	ldd	r31, Y+2	; 0x02
    27f6:	85 81       	ldd	r24, Z+5	; 0x05
    27f8:	89 2b       	or	r24, r25
    27fa:	8c 6f       	ori	r24, 0xFC	; 252
    27fc:	8c 93       	st	X, r24
			TIMSK|=(1<<TOIE1);
    27fe:	a9 e5       	ldi	r26, 0x59	; 89
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e9 e5       	ldi	r30, 0x59	; 89
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	84 60       	ori	r24, 0x04	; 4
    280a:	8c 93       	st	X, r24
    280c:	25 c0       	rjmp	.+74     	; 0x2858 <Timer1_init+0xe2>
			break;
		case CTC:
			GPIO_setupPinDirection(PORTD_ID, PIN5_ID, PIN_OUTPUT);
    280e:	83 e0       	ldi	r24, 0x03	; 3
    2810:	65 e0       	ldi	r22, 0x05	; 5
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	0e 94 61 09 	call	0x12c2	; 0x12c2 <GPIO_setupPinDirection>
			TCCR1B=(TCCR1B&0xE7)|((Config_Ptr->mode)<<1);
    2818:	ae e4       	ldi	r26, 0x4E	; 78
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	ee e4       	ldi	r30, 0x4E	; 78
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	28 2f       	mov	r18, r24
    2824:	27 7e       	andi	r18, 0xE7	; 231
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	85 81       	ldd	r24, Z+5	; 0x05
    282c:	88 2f       	mov	r24, r24
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	82 2b       	or	r24, r18
    2836:	8c 93       	st	X, r24
			TIMSK|=(1<<OCIE1A);
    2838:	a9 e5       	ldi	r26, 0x59	; 89
    283a:	b0 e0       	ldi	r27, 0x00	; 0
    283c:	e9 e5       	ldi	r30, 0x59	; 89
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	80 61       	ori	r24, 0x10	; 16
    2844:	8c 93       	st	X, r24
			OCR1A=Config_Ptr->compare_value;
    2846:	aa e4       	ldi	r26, 0x4A	; 74
    2848:	b0 e0       	ldi	r27, 0x00	; 0
    284a:	e9 81       	ldd	r30, Y+1	; 0x01
    284c:	fa 81       	ldd	r31, Y+2	; 0x02
    284e:	82 81       	ldd	r24, Z+2	; 0x02
    2850:	93 81       	ldd	r25, Z+3	; 0x03
    2852:	11 96       	adiw	r26, 0x01	; 1
    2854:	9c 93       	st	X, r25
    2856:	8e 93       	st	-X, r24
			break;
	}

}
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <Timer1_deInit>:
/* To disable The Timer */
void Timer1_deInit(void){
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
	TIMSK&=~(1<<TOIE1);
    286e:	a9 e5       	ldi	r26, 0x59	; 89
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e9 e5       	ldi	r30, 0x59	; 89
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	8b 7f       	andi	r24, 0xFB	; 251
    287a:	8c 93       	st	X, r24
	TIMSK&=(1<<OCIE1A);
    287c:	a9 e5       	ldi	r26, 0x59	; 89
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e9 e5       	ldi	r30, 0x59	; 89
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 71       	andi	r24, 0x10	; 16
    2888:	8c 93       	st	X, r24
	TCCR1A=0;
    288a:	ef e4       	ldi	r30, 0x4F	; 79
    288c:	f0 e0       	ldi	r31, 0x00	; 0
    288e:	10 82       	st	Z, r1
	TCCR1B=0;
    2890:	ee e4       	ldi	r30, 0x4E	; 78
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	10 82       	st	Z, r1
	TCNT1=0;
    2896:	ec e4       	ldi	r30, 0x4C	; 76
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	11 82       	std	Z+1, r1	; 0x01
    289c:	10 82       	st	Z, r1
}
    289e:	cf 91       	pop	r28
    28a0:	df 91       	pop	r29
    28a2:	08 95       	ret

000028a4 <Timer1_setCallBack>:
/* To set the call back function address*/
void Timer1_setCallBack(void(*a_ptr)(void)){
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <Timer1_setCallBack+0x6>
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	90 93 e5 00 	sts	0x00E5, r25
    28ba:	80 93 e4 00 	sts	0x00E4, r24
}
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	00 d0       	rcall	.+0      	; 0x28ce <UART_init+0x6>
    28ce:	00 d0       	rcall	.+0      	; 0x28d0 <UART_init+0x8>
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	9c 83       	std	Y+4, r25	; 0x04
    28d6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28d8:	1a 82       	std	Y+2, r1	; 0x02
    28da:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28dc:	eb e2       	ldi	r30, 0x2B	; 43
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28e4:	ea e2       	ldi	r30, 0x2A	; 42
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	88 e1       	ldi	r24, 0x18	; 24
    28ea:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) ;
    28ec:	e0 e4       	ldi	r30, 0x40	; 64
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 e8       	ldi	r24, 0x80	; 128
    28f2:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop_bit)<<3);
    28f4:	a0 e4       	ldi	r26, 0x40	; 64
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	e0 e4       	ldi	r30, 0x40	; 64
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	28 2f       	mov	r18, r24
    2900:	27 7f       	andi	r18, 0xF7	; 247
    2902:	eb 81       	ldd	r30, Y+3	; 0x03
    2904:	fc 81       	ldd	r31, Y+4	; 0x04
    2906:	82 81       	ldd	r24, Z+2	; 0x02
    2908:	88 2f       	mov	r24, r24
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	88 0f       	add	r24, r24
    290e:	99 1f       	adc	r25, r25
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	88 0f       	add	r24, r24
    2916:	99 1f       	adc	r25, r25
    2918:	82 2b       	or	r24, r18
    291a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->bit_data)<<1);
    291c:	a0 e4       	ldi	r26, 0x40	; 64
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	e0 e4       	ldi	r30, 0x40	; 64
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	28 2f       	mov	r18, r24
    2928:	29 7f       	andi	r18, 0xF9	; 249
    292a:	eb 81       	ldd	r30, Y+3	; 0x03
    292c:	fc 81       	ldd	r31, Y+4	; 0x04
    292e:	80 81       	ld	r24, Z
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	88 0f       	add	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	82 2b       	or	r24, r18
    293a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity)<<4);
    293c:	a0 e4       	ldi	r26, 0x40	; 64
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e0 e4       	ldi	r30, 0x40	; 64
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	28 2f       	mov	r18, r24
    2948:	2f 7c       	andi	r18, 0xCF	; 207
    294a:	eb 81       	ldd	r30, Y+3	; 0x03
    294c:	fc 81       	ldd	r31, Y+4	; 0x04
    294e:	81 81       	ldd	r24, Z+1	; 0x01
    2950:	88 2f       	mov	r24, r24
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	82 95       	swap	r24
    2956:	92 95       	swap	r25
    2958:	90 7f       	andi	r25, 0xF0	; 240
    295a:	98 27       	eor	r25, r24
    295c:	80 7f       	andi	r24, 0xF0	; 240
    295e:	98 27       	eor	r25, r24
    2960:	82 2b       	or	r24, r18
    2962:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2964:	eb 81       	ldd	r30, Y+3	; 0x03
    2966:	fc 81       	ldd	r31, Y+4	; 0x04
    2968:	83 81       	ldd	r24, Z+3	; 0x03
    296a:	94 81       	ldd	r25, Z+4	; 0x04
    296c:	a5 81       	ldd	r26, Z+5	; 0x05
    296e:	b6 81       	ldd	r27, Z+6	; 0x06
    2970:	88 0f       	add	r24, r24
    2972:	99 1f       	adc	r25, r25
    2974:	aa 1f       	adc	r26, r26
    2976:	bb 1f       	adc	r27, r27
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	aa 1f       	adc	r26, r26
    297e:	bb 1f       	adc	r27, r27
    2980:	88 0f       	add	r24, r24
    2982:	99 1f       	adc	r25, r25
    2984:	aa 1f       	adc	r26, r26
    2986:	bb 1f       	adc	r27, r27
    2988:	9c 01       	movw	r18, r24
    298a:	ad 01       	movw	r20, r26
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	92 e1       	ldi	r25, 0x12	; 18
    2990:	aa e7       	ldi	r26, 0x7A	; 122
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	bc 01       	movw	r22, r24
    2996:	cd 01       	movw	r24, r26
    2998:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodsi4>
    299c:	da 01       	movw	r26, r20
    299e:	c9 01       	movw	r24, r18
    29a0:	01 97       	sbiw	r24, 0x01	; 1
    29a2:	9a 83       	std	Y+2, r25	; 0x02
    29a4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29a6:	e0 e4       	ldi	r30, 0x40	; 64
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	89 2f       	mov	r24, r25
    29b0:	99 27       	eor	r25, r25
    29b2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29b4:	e9 e2       	ldi	r30, 0x29	; 41
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	80 83       	st	Z, r24
}
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	0f 90       	pop	r0
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	08 95       	ret

000029ca <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29ca:	df 93       	push	r29
    29cc:	cf 93       	push	r28
    29ce:	0f 92       	push	r0
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    29d4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    29d6:	eb e2       	ldi	r30, 0x2B	; 43
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	80 72       	andi	r24, 0x20	; 32
    29e2:	90 70       	andi	r25, 0x00	; 0
    29e4:	00 97       	sbiw	r24, 0x00	; 0
    29e6:	b9 f3       	breq	.-18     	; 0x29d6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    29e8:	ec e2       	ldi	r30, 0x2C	; 44
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	89 81       	ldd	r24, Y+1	; 0x01
    29ee:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a00:	eb e2       	ldi	r30, 0x2B	; 43
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	88 23       	and	r24, r24
    2a08:	dc f7       	brge	.-10     	; 0x2a00 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2a0a:	ec e2       	ldi	r30, 0x2C	; 44
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <UART_sendString+0x6>
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9b 83       	std	Y+3, r25	; 0x03
    2a24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	0e c0       	rjmp	.+28     	; 0x2a46 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	9b 81       	ldd	r25, Y+3	; 0x03
    2a34:	fc 01       	movw	r30, r24
    2a36:	e2 0f       	add	r30, r18
    2a38:	f3 1f       	adc	r31, r19
    2a3a:	80 81       	ld	r24, Z
    2a3c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <UART_sendByte>
		i++;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	80 81       	ld	r24, Z
    2a58:	88 23       	and	r24, r24
    2a5a:	39 f7       	brne	.-50     	; 0x2a2a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <UART_receiveString+0xa>
    2a72:	0f 92       	push	r0
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a7c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	8c 01       	movw	r16, r24
    2a8a:	02 0f       	add	r16, r18
    2a8c:	13 1f       	adc	r17, r19
    2a8e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_recieveByte>
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	02 0f       	add	r16, r18
    2aac:	13 1f       	adc	r17, r19
    2aae:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_recieveByte>
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	e2 0f       	add	r30, r18
    2ac4:	f3 1f       	adc	r31, r19
    2ac6:	80 81       	ld	r24, Z
    2ac8:	83 32       	cpi	r24, 0x23	; 35
    2aca:	31 f7       	brne	.-52     	; 0x2a98 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	10 82       	st	Z, r1
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <__udivmodsi4>:
    2aee:	a1 e2       	ldi	r26, 0x21	; 33
    2af0:	1a 2e       	mov	r1, r26
    2af2:	aa 1b       	sub	r26, r26
    2af4:	bb 1b       	sub	r27, r27
    2af6:	fd 01       	movw	r30, r26
    2af8:	0d c0       	rjmp	.+26     	; 0x2b14 <__udivmodsi4_ep>

00002afa <__udivmodsi4_loop>:
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	ee 1f       	adc	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	a2 17       	cp	r26, r18
    2b04:	b3 07       	cpc	r27, r19
    2b06:	e4 07       	cpc	r30, r20
    2b08:	f5 07       	cpc	r31, r21
    2b0a:	20 f0       	brcs	.+8      	; 0x2b14 <__udivmodsi4_ep>
    2b0c:	a2 1b       	sub	r26, r18
    2b0e:	b3 0b       	sbc	r27, r19
    2b10:	e4 0b       	sbc	r30, r20
    2b12:	f5 0b       	sbc	r31, r21

00002b14 <__udivmodsi4_ep>:
    2b14:	66 1f       	adc	r22, r22
    2b16:	77 1f       	adc	r23, r23
    2b18:	88 1f       	adc	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	1a 94       	dec	r1
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <__udivmodsi4_loop>
    2b20:	60 95       	com	r22
    2b22:	70 95       	com	r23
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	bd 01       	movw	r22, r26
    2b2e:	cf 01       	movw	r24, r30
    2b30:	08 95       	ret

00002b32 <__prologue_saves__>:
    2b32:	2f 92       	push	r2
    2b34:	3f 92       	push	r3
    2b36:	4f 92       	push	r4
    2b38:	5f 92       	push	r5
    2b3a:	6f 92       	push	r6
    2b3c:	7f 92       	push	r7
    2b3e:	8f 92       	push	r8
    2b40:	9f 92       	push	r9
    2b42:	af 92       	push	r10
    2b44:	bf 92       	push	r11
    2b46:	cf 92       	push	r12
    2b48:	df 92       	push	r13
    2b4a:	ef 92       	push	r14
    2b4c:	ff 92       	push	r15
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	ca 1b       	sub	r28, r26
    2b5c:	db 0b       	sbc	r29, r27
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	09 94       	ijmp

00002b6a <__epilogue_restores__>:
    2b6a:	2a 88       	ldd	r2, Y+18	; 0x12
    2b6c:	39 88       	ldd	r3, Y+17	; 0x11
    2b6e:	48 88       	ldd	r4, Y+16	; 0x10
    2b70:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b72:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b74:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b76:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b78:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b7c:	b9 84       	ldd	r11, Y+9	; 0x09
    2b7e:	c8 84       	ldd	r12, Y+8	; 0x08
    2b80:	df 80       	ldd	r13, Y+7	; 0x07
    2b82:	ee 80       	ldd	r14, Y+6	; 0x06
    2b84:	fd 80       	ldd	r15, Y+5	; 0x05
    2b86:	0c 81       	ldd	r16, Y+4	; 0x04
    2b88:	1b 81       	ldd	r17, Y+3	; 0x03
    2b8a:	aa 81       	ldd	r26, Y+2	; 0x02
    2b8c:	b9 81       	ldd	r27, Y+1	; 0x01
    2b8e:	ce 0f       	add	r28, r30
    2b90:	d1 1d       	adc	r29, r1
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	ed 01       	movw	r28, r26
    2b9e:	08 95       	ret

00002ba0 <itoa>:
    2ba0:	fb 01       	movw	r30, r22
    2ba2:	9f 01       	movw	r18, r30
    2ba4:	e8 94       	clt
    2ba6:	42 30       	cpi	r20, 0x02	; 2
    2ba8:	c4 f0       	brlt	.+48     	; 0x2bda <itoa+0x3a>
    2baa:	45 32       	cpi	r20, 0x25	; 37
    2bac:	b4 f4       	brge	.+44     	; 0x2bda <itoa+0x3a>
    2bae:	4a 30       	cpi	r20, 0x0A	; 10
    2bb0:	29 f4       	brne	.+10     	; 0x2bbc <itoa+0x1c>
    2bb2:	97 fb       	bst	r25, 7
    2bb4:	1e f4       	brtc	.+6      	; 0x2bbc <itoa+0x1c>
    2bb6:	90 95       	com	r25
    2bb8:	81 95       	neg	r24
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	64 2f       	mov	r22, r20
    2bbe:	77 27       	eor	r23, r23
    2bc0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodhi4>
    2bc4:	80 5d       	subi	r24, 0xD0	; 208
    2bc6:	8a 33       	cpi	r24, 0x3A	; 58
    2bc8:	0c f0       	brlt	.+2      	; 0x2bcc <itoa+0x2c>
    2bca:	89 5d       	subi	r24, 0xD9	; 217
    2bcc:	81 93       	st	Z+, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	a1 f7       	brne	.-24     	; 0x2bbc <itoa+0x1c>
    2bd4:	16 f4       	brtc	.+4      	; 0x2bda <itoa+0x3a>
    2bd6:	5d e2       	ldi	r21, 0x2D	; 45
    2bd8:	51 93       	st	Z+, r21
    2bda:	10 82       	st	Z, r1
    2bdc:	c9 01       	movw	r24, r18
    2bde:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <strrev>

00002be2 <strrev>:
    2be2:	dc 01       	movw	r26, r24
    2be4:	fc 01       	movw	r30, r24
    2be6:	67 2f       	mov	r22, r23
    2be8:	71 91       	ld	r23, Z+
    2bea:	77 23       	and	r23, r23
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <strrev+0x4>
    2bee:	32 97       	sbiw	r30, 0x02	; 2
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <strrev+0x18>
    2bf2:	7c 91       	ld	r23, X
    2bf4:	6d 93       	st	X+, r22
    2bf6:	70 83       	st	Z, r23
    2bf8:	62 91       	ld	r22, -Z
    2bfa:	ae 17       	cp	r26, r30
    2bfc:	bf 07       	cpc	r27, r31
    2bfe:	c8 f3       	brcs	.-14     	; 0x2bf2 <strrev+0x10>
    2c00:	08 95       	ret

00002c02 <__udivmodhi4>:
    2c02:	aa 1b       	sub	r26, r26
    2c04:	bb 1b       	sub	r27, r27
    2c06:	51 e1       	ldi	r21, 0x11	; 17
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <__udivmodhi4_ep>

00002c0a <__udivmodhi4_loop>:
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	a6 17       	cp	r26, r22
    2c10:	b7 07       	cpc	r27, r23
    2c12:	10 f0       	brcs	.+4      	; 0x2c18 <__udivmodhi4_ep>
    2c14:	a6 1b       	sub	r26, r22
    2c16:	b7 0b       	sbc	r27, r23

00002c18 <__udivmodhi4_ep>:
    2c18:	88 1f       	adc	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	5a 95       	dec	r21
    2c1e:	a9 f7       	brne	.-22     	; 0x2c0a <__udivmodhi4_loop>
    2c20:	80 95       	com	r24
    2c22:	90 95       	com	r25
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	08 95       	ret

00002c2a <_exit>:
    2c2a:	f8 94       	cli

00002c2c <__stop_program>:
    2c2c:	ff cf       	rjmp	.-2      	; 0x2c2c <__stop_program>
